<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.9">
  <compounddef id="classXapian_1_1ValueCountMatchSpy" kind="class" prot="public">
    <compoundname>Xapian::ValueCountMatchSpy</compoundname>
    <basecompoundref refid="classXapian_1_1MatchSpy" prot="public" virt="non-virtual">Xapian::MatchSpy</basecompoundref>
    <includes local="no">matchspy.h</includes>
    <innerclass refid="structXapian_1_1ValueCountMatchSpy_1_1Internal" prot="public">Xapian::ValueCountMatchSpy::Internal</innerclass>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classXapian_1_1ValueCountMatchSpy_183738c5d0701502e6452c71c77487eb6" prot="protected" static="no" mutable="no">
        <type>Xapian::Internal::intrusive_ptr&lt; Internal &gt;</type>
        <definition>Xapian::Internal::intrusive_ptr&lt;Internal&gt; Xapian::ValueCountMatchSpy::internal</definition>
        <argsstring></argsstring>
        <name>internal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" line="184" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classXapian_1_1ValueCountMatchSpy_1be9390bb136f7c380126dc89c463795d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Xapian::ValueCountMatchSpy::ValueCountMatchSpy</definition>
        <argsstring>()</argsstring>
        <name>ValueCountMatchSpy</name>
        <briefdescription>
<para>Construct an empty <ref refid="classXapian_1_1ValueCountMatchSpy" kindref="compound">ValueCountMatchSpy</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" line="188" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueCountMatchSpy_1d1cb660b864dfa6d72cffbe587f5a8b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Xapian::ValueCountMatchSpy::ValueCountMatchSpy</definition>
        <argsstring>(Xapian::valueno slot_)</argsstring>
        <name>ValueCountMatchSpy</name>
        <param>
          <type><ref refid="namespaceXapian_194a899651fa920c72ffa9635bde630ea" kindref="member">Xapian::valueno</ref></type>
          <declname>slot_</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classXapian_1_1MatchSpy" kindref="compound">MatchSpy</ref> which counts the values in a particular slot. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" line="192" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" bodystart="191" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueCountMatchSpy_1842576241bf5d4e38c84b8ac5272d3da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Xapian::ValueCountMatchSpy::get_total</definition>
        <argsstring>() const </argsstring>
        <name>get_total</name>
        <briefdescription>
<para>Return the total number of documents tallied. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" line="195" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" bodystart="195" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueCountMatchSpy_191db513ea45da7adf5ff25c4706ab9b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classXapian_1_1TermIterator" kindref="compound">TermIterator</ref></type>
        <definition>TermIterator Xapian::ValueCountMatchSpy::values_begin</definition>
        <argsstring>() const </argsstring>
        <name>values_begin</name>
        <briefdescription>
<para>Get an iterator over the values seen in the slot. </para>        </briefdescription>
        <detaileddescription>
<para>Items will be returned in ascending alphabetical order.</para><para>During the iteration, the frequency of the current value can be obtained with the get_termfreq() method on the iterator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" line="206"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueCountMatchSpy_134a09b5055c1953f28f6426769d0de2c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classXapian_1_1TermIterator" kindref="compound">TermIterator</ref></type>
        <definition>TermIterator Xapian::ValueCountMatchSpy::values_end</definition>
        <argsstring>() const </argsstring>
        <name>values_end</name>
        <briefdescription>
<para>End iterator corresponding to <ref refid="classXapian_1_1ValueCountMatchSpy_191db513ea45da7adf5ff25c4706ab9b0" kindref="member">values_begin()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" line="209" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" bodystart="209" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueCountMatchSpy_12d433c9f883bdfa98fd1d56b7a972a3f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classXapian_1_1TermIterator" kindref="compound">TermIterator</ref></type>
        <definition>TermIterator Xapian::ValueCountMatchSpy::top_values_begin</definition>
        <argsstring>(size_t maxvalues) const </argsstring>
        <name>top_values_begin</name>
        <param>
          <type>size_t</type>
          <declname>maxvalues</declname>
        </param>
        <briefdescription>
<para>Get an iterator over the most frequent values seen in the slot. </para>        </briefdescription>
        <detaileddescription>
<para>Items will be returned in descending order of frequency. Values with the same frequency will be returned in ascending alphabetical order.</para><para>During the iteration, the frequency of the current value can be obtained with the get_termfreq() method on the iterator.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maxvalues</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of values to return. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" line="223"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueCountMatchSpy_12722e0f8735f696bd130f18069b394b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classXapian_1_1TermIterator" kindref="compound">TermIterator</ref></type>
        <definition>TermIterator Xapian::ValueCountMatchSpy::top_values_end</definition>
        <argsstring>(size_t) const </argsstring>
        <name>top_values_end</name>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
<para>End iterator corresponding to <ref refid="classXapian_1_1ValueCountMatchSpy_12d433c9f883bdfa98fd1d56b7a972a3f" kindref="member">top_values_begin()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" line="226" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" bodystart="226" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueCountMatchSpy_1ba74fcbd87fa4a173d7cc6b7a26567d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Xapian::ValueCountMatchSpy::operator()</definition>
        <argsstring>(const Xapian::Document &amp;doc, Xapian::weight wt)</argsstring>
        <name>operator()</name>
        <reimplements refid="classXapian_1_1MatchSpy_11d4a22970c8042a0bd697b473625f9bf">operator()</reimplements>
        <param>
          <type>const <ref refid="classXapian_1_1Document" kindref="compound">Xapian::Document</ref> &amp;</type>
          <declname>doc</declname>
        </param>
        <param>
          <type><ref refid="namespaceXapian_1cac12803afc9e24ee5141c119acb8884" kindref="member">Xapian::weight</ref></type>
          <declname>wt</declname>
        </param>
        <briefdescription>
<para>Implementation of virtual operator(). </para>        </briefdescription>
        <detaileddescription>
<para>This implementation tallies values for a matching document. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" line="234"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueCountMatchSpy_12f3f76f7a269b15b22e5f266a166ed00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classXapian_1_1MatchSpy" kindref="compound">MatchSpy</ref> *</type>
        <definition>virtual MatchSpy* Xapian::ValueCountMatchSpy::clone</definition>
        <argsstring>() const </argsstring>
        <name>clone</name>
        <reimplements refid="classXapian_1_1MatchSpy_1d172b16efde32cf0dcbb0fb6fb43dc33">clone</reimplements>
        <briefdescription>
<para>Clone the match spy. </para>        </briefdescription>
        <detaileddescription>
<para>The clone should inherit the configuration of the parent, but need not inherit the state. ie, the clone does not need to be passed information about the results seen by the parent.</para><para>If you don&apos;t want to support the remote backend in your match spy, you can use the default implementation which simply throws <ref refid="classXapian_1_1UnimplementedError" kindref="compound">Xapian::UnimplementedError</ref>.</para><para>Note that the returned object will be deallocated by <ref refid="namespaceXapian" kindref="compound">Xapian</ref> after use with &quot;delete&quot;. It must therefore have been allocated with &quot;new&quot;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" line="236"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueCountMatchSpy_10156235fbae335975efe173cad85ea0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string Xapian::ValueCountMatchSpy::name</definition>
        <argsstring>() const </argsstring>
        <name>name</name>
        <reimplements refid="classXapian_1_1MatchSpy_14f7e79243aed9b81fba8a6c7f9500f0f">name</reimplements>
        <briefdescription>
<para>Return the name of this match spy. </para>        </briefdescription>
        <detaileddescription>
<para>This name is used by the remote backend. It is passed with the serialised parameters to the remote server so that it knows which class to create.</para><para>Return the full namespace-qualified name of your class here - if your class is called MyApp::FooMatchSpy, return &quot;MyApp::FooMatchSpy&quot; from this method.</para><para>If you don&apos;t want to support the remote backend in your match spy, you can use the default implementation which simply throws <ref refid="classXapian_1_1UnimplementedError" kindref="compound">Xapian::UnimplementedError</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" line="237"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueCountMatchSpy_14b0b12f88a83fa854160d62d3f0b1a66" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string Xapian::ValueCountMatchSpy::serialise</definition>
        <argsstring>() const </argsstring>
        <name>serialise</name>
        <reimplements refid="classXapian_1_1MatchSpy_159b3e4c181f9dc78e78609949ffe6ec7">serialise</reimplements>
        <briefdescription>
<para>Return this object&apos;s parameters serialised as a single string. </para>        </briefdescription>
        <detaileddescription>
<para>If you don&apos;t want to support the remote backend in your match spy, you can use the default implementation which simply throws <ref refid="classXapian_1_1UnimplementedError" kindref="compound">Xapian::UnimplementedError</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" line="238"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueCountMatchSpy_100c8fb9751f52c6f4a6610e23b130690" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classXapian_1_1MatchSpy" kindref="compound">MatchSpy</ref> *</type>
        <definition>virtual MatchSpy* Xapian::ValueCountMatchSpy::unserialise</definition>
        <argsstring>(const std::string &amp;s, const Registry &amp;context) const </argsstring>
        <name>unserialise</name>
        <reimplements refid="classXapian_1_1MatchSpy_18ddda381134be9b9d973e746753ad3e2">unserialise</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classXapian_1_1Registry" kindref="compound">Registry</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>Unserialise parameters. </para>        </briefdescription>
        <detaileddescription>
<para>This method unserialises parameters serialised by the <emphasis><ref refid="classXapian_1_1ValueCountMatchSpy_14b0b12f88a83fa854160d62d3f0b1a66" kindref="member">serialise()</ref></emphasis> method and allocates and returns a new object initialised with them.</para><para>If you don&apos;t want to support the remote backend in your match spy, you can use the default implementation which simply throws <ref refid="classXapian_1_1UnimplementedError" kindref="compound">Xapian::UnimplementedError</ref>.</para><para>Note that the returned object will be deallocated by <ref refid="namespaceXapian" kindref="compound">Xapian</ref> after use with &quot;delete&quot;. It must therefore have been allocated with &quot;new&quot;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" line="240"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueCountMatchSpy_1bf75525e101f358d07750abc466115da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string Xapian::ValueCountMatchSpy::serialise_results</definition>
        <argsstring>() const </argsstring>
        <name>serialise_results</name>
        <reimplements refid="classXapian_1_1MatchSpy_13892fcdd67c425ff1ba493e2ac397ce9">serialise_results</reimplements>
        <briefdescription>
<para>Serialise the results of this match spy. </para>        </briefdescription>
        <detaileddescription>
<para>If you don&apos;t want to support the remote backend in your match spy, you can use the default implementation which simply throws <ref refid="classXapian_1_1UnimplementedError" kindref="compound">Xapian::UnimplementedError</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" line="241"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueCountMatchSpy_1cc26d27271e945dc555c8f981b4fe775" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Xapian::ValueCountMatchSpy::merge_results</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>merge_results</name>
        <reimplements refid="classXapian_1_1MatchSpy_1921014b484002f909cd9649477e25c81">merge_results</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Unserialise some results, and merge them into this matchspy. </para>        </briefdescription>
        <detaileddescription>
<para>The order in which results are merged should not be significant, since this order is not specified (and will vary depending on the speed of the search in each sub-database).</para><para>If you don&apos;t want to support the remote backend in your match spy, you can use the default implementation which simply throws <ref refid="classXapian_1_1UnimplementedError" kindref="compound">Xapian::UnimplementedError</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" line="242"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueCountMatchSpy_1350eb6f93aa5e01845a56f2fd30391f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string Xapian::ValueCountMatchSpy::get_description</definition>
        <argsstring>() const </argsstring>
        <name>get_description</name>
        <reimplements refid="classXapian_1_1MatchSpy_1b12e942f6657c86938cb83a55febc4e2">get_description</reimplements>
        <briefdescription>
<para>Return a string describing this object. </para>        </briefdescription>
        <detaileddescription>
<para>This default implementation returns a generic answer, to avoid forcing those deriving their own <ref refid="classXapian_1_1MatchSpy" kindref="compound">MatchSpy</ref> subclasses from having to implement this (they may not care what <ref refid="classXapian_1_1ValueCountMatchSpy_1350eb6f93aa5e01845a56f2fd30391f8" kindref="member">get_description()</ref> gives for their subclass). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" line="243"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for counting the frequencies of values in the matching documents. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="718">
        <label>Xapian::ValueCountMatchSpy</label>
        <link refid="classXapian_1_1ValueCountMatchSpy"/>
        <childnode refid="719" relation="public-inheritance">
        </childnode>
      </node>
      <node id="719">
        <label>Xapian::MatchSpy</label>
        <link refid="classXapian_1_1MatchSpy"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="720">
        <label>Xapian::ValueCountMatchSpy</label>
        <link refid="classXapian_1_1ValueCountMatchSpy"/>
        <childnode refid="721" relation="public-inheritance">
        </childnode>
      </node>
      <node id="721">
        <label>Xapian::MatchSpy</label>
        <link refid="classXapian_1_1MatchSpy"/>
      </node>
    </collaborationgraph>
    <location file="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" line="161" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/matchspy.h" bodystart="161" bodyend="244"/>
    <listofallmembers>
      <member refid="classXapian_1_1ValueCountMatchSpy_12f3f76f7a269b15b22e5f266a166ed00" prot="public" virt="virtual"><scope>Xapian::ValueCountMatchSpy</scope><name>clone</name></member>
      <member refid="classXapian_1_1ValueCountMatchSpy_1350eb6f93aa5e01845a56f2fd30391f8" prot="public" virt="virtual"><scope>Xapian::ValueCountMatchSpy</scope><name>get_description</name></member>
      <member refid="classXapian_1_1ValueCountMatchSpy_1842576241bf5d4e38c84b8ac5272d3da" prot="public" virt="non-virtual"><scope>Xapian::ValueCountMatchSpy</scope><name>get_total</name></member>
      <member refid="classXapian_1_1ValueCountMatchSpy_183738c5d0701502e6452c71c77487eb6" prot="protected" virt="non-virtual"><scope>Xapian::ValueCountMatchSpy</scope><name>internal</name></member>
      <member refid="classXapian_1_1MatchSpy_16f1b24d1ef113cf625ce75b6320212ed" prot="protected" virt="non-virtual"><scope>Xapian::ValueCountMatchSpy</scope><name>MatchSpy</name></member>
      <member refid="classXapian_1_1ValueCountMatchSpy_1cc26d27271e945dc555c8f981b4fe775" prot="public" virt="virtual"><scope>Xapian::ValueCountMatchSpy</scope><name>merge_results</name></member>
      <member refid="classXapian_1_1ValueCountMatchSpy_10156235fbae335975efe173cad85ea0a" prot="public" virt="virtual"><scope>Xapian::ValueCountMatchSpy</scope><name>name</name></member>
      <member refid="classXapian_1_1ValueCountMatchSpy_1ba74fcbd87fa4a173d7cc6b7a26567d4" prot="public" virt="virtual"><scope>Xapian::ValueCountMatchSpy</scope><name>operator()</name></member>
      <member refid="classXapian_1_1ValueCountMatchSpy_14b0b12f88a83fa854160d62d3f0b1a66" prot="public" virt="virtual"><scope>Xapian::ValueCountMatchSpy</scope><name>serialise</name></member>
      <member refid="classXapian_1_1ValueCountMatchSpy_1bf75525e101f358d07750abc466115da" prot="public" virt="virtual"><scope>Xapian::ValueCountMatchSpy</scope><name>serialise_results</name></member>
      <member refid="classXapian_1_1ValueCountMatchSpy_12d433c9f883bdfa98fd1d56b7a972a3f" prot="public" virt="non-virtual"><scope>Xapian::ValueCountMatchSpy</scope><name>top_values_begin</name></member>
      <member refid="classXapian_1_1ValueCountMatchSpy_12722e0f8735f696bd130f18069b394b6" prot="public" virt="non-virtual"><scope>Xapian::ValueCountMatchSpy</scope><name>top_values_end</name></member>
      <member refid="classXapian_1_1ValueCountMatchSpy_100c8fb9751f52c6f4a6610e23b130690" prot="public" virt="virtual"><scope>Xapian::ValueCountMatchSpy</scope><name>unserialise</name></member>
      <member refid="classXapian_1_1ValueCountMatchSpy_1be9390bb136f7c380126dc89c463795d" prot="public" virt="non-virtual"><scope>Xapian::ValueCountMatchSpy</scope><name>ValueCountMatchSpy</name></member>
      <member refid="classXapian_1_1ValueCountMatchSpy_1d1cb660b864dfa6d72cffbe587f5a8b6" prot="public" virt="non-virtual"><scope>Xapian::ValueCountMatchSpy</scope><name>ValueCountMatchSpy</name></member>
      <member refid="classXapian_1_1ValueCountMatchSpy_191db513ea45da7adf5ff25c4706ab9b0" prot="public" virt="non-virtual"><scope>Xapian::ValueCountMatchSpy</scope><name>values_begin</name></member>
      <member refid="classXapian_1_1ValueCountMatchSpy_134a09b5055c1953f28f6426769d0de2c" prot="public" virt="non-virtual"><scope>Xapian::ValueCountMatchSpy</scope><name>values_end</name></member>
      <member refid="classXapian_1_1MatchSpy_133eef1126286858ed6c9908028dcae5b" prot="public" virt="virtual"><scope>Xapian::ValueCountMatchSpy</scope><name>~MatchSpy</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
