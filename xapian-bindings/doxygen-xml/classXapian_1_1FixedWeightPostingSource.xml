<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.9">
  <compounddef id="classXapian_1_1FixedWeightPostingSource" kind="class" prot="public">
    <compoundname>Xapian::FixedWeightPostingSource</compoundname>
    <basecompoundref refid="classXapian_1_1PostingSource" prot="public" virt="non-virtual">Xapian::PostingSource</basecompoundref>
    <includes local="no">postingsource.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classXapian_1_1FixedWeightPostingSource_1f4bc6b19f4d717fa1f34b8fb7d01f241" prot="private" static="no" mutable="no">
        <type><ref refid="classXapian_1_1Database" kindref="compound">Xapian::Database</ref></type>
        <definition>Xapian::Database Xapian::FixedWeightPostingSource::db</definition>
        <argsstring></argsstring>
        <name>db</name>
        <briefdescription>
<para>The database we&apos;re reading documents from. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="535" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" bodystart="535" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classXapian_1_1FixedWeightPostingSource_1cccc5a45afd0115647ddc96193bff225" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceXapian_17f30aa95f0c42b117dafaf66ba24241d" kindref="member">Xapian::doccount</ref></type>
        <definition>Xapian::doccount Xapian::FixedWeightPostingSource::termfreq</definition>
        <argsstring></argsstring>
        <name>termfreq</name>
        <briefdescription>
<para>Number of documents in the posting source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="538" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" bodystart="538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classXapian_1_1FixedWeightPostingSource_10e6ae9d378caac41e347c5d1c08a7867" prot="private" static="no" mutable="no">
        <type><ref refid="classXapian_1_1PostingIterator" kindref="compound">Xapian::PostingIterator</ref></type>
        <definition>Xapian::PostingIterator Xapian::FixedWeightPostingSource::it</definition>
        <argsstring></argsstring>
        <name>it</name>
        <briefdescription>
<para>Iterator over all documents. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="541" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" bodystart="541" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classXapian_1_1FixedWeightPostingSource_1932b6c2771ea023a26d671c5ea623ff8" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Xapian::FixedWeightPostingSource::started</definition>
        <argsstring></argsstring>
        <name>started</name>
        <briefdescription>
<para>Flag indicating if we&apos;ve started (true if we have). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="544" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" bodystart="544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classXapian_1_1FixedWeightPostingSource_1b26915856a255989b862c497e3f5113b" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceXapian_18fa9094bebe1256a7be935a5ede87a64" kindref="member">Xapian::docid</ref></type>
        <definition>Xapian::docid Xapian::FixedWeightPostingSource::check_docid</definition>
        <argsstring></argsstring>
        <name>check_docid</name>
        <briefdescription>
<para>The docid last passed to <ref refid="classXapian_1_1FixedWeightPostingSource_16b51fb24303528060e48df95ada3d989" kindref="member">check()</ref> (0 if <ref refid="classXapian_1_1FixedWeightPostingSource_16b51fb24303528060e48df95ada3d989" kindref="member">check()</ref> wasn&apos;t the last move). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="547" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" bodystart="547" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classXapian_1_1FixedWeightPostingSource_1f946b00ce498fa513a1f1a6781d70a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Xapian::FixedWeightPostingSource::FixedWeightPostingSource</definition>
        <argsstring>(Xapian::weight wt)</argsstring>
        <name>FixedWeightPostingSource</name>
        <param>
          <type><ref refid="namespaceXapian_1cac12803afc9e24ee5141c119acb8884" kindref="member">Xapian::weight</ref></type>
          <declname>wt</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classXapian_1_1FixedWeightPostingSource" kindref="compound">FixedWeightPostingSource</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wt</parametername>
</parameternamelist>
<parameterdescription>
<para>The fixed weight to return. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="554"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1FixedWeightPostingSource_142262ab06f7d9d2f3122bc3fb115b23e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceXapian_17f30aa95f0c42b117dafaf66ba24241d" kindref="member">Xapian::doccount</ref></type>
        <definition>Xapian::doccount Xapian::FixedWeightPostingSource::get_termfreq_min</definition>
        <argsstring>() const </argsstring>
        <name>get_termfreq_min</name>
        <reimplements refid="classXapian_1_1PostingSource_15ecf450314e8b266eb9c8fae78e141d3">get_termfreq_min</reimplements>
        <briefdescription>
<para>A lower bound on the number of documents this object can return. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="namespaceXapian" kindref="compound">Xapian</ref> will always call <ref refid="classXapian_1_1FixedWeightPostingSource_13c9698d1d0d4d47247bd19451e1e2077" kindref="member">init()</ref> on a <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> before calling this for the first time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="556"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1FixedWeightPostingSource_13296c3490733ac9f36e2dff0719746a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceXapian_17f30aa95f0c42b117dafaf66ba24241d" kindref="member">Xapian::doccount</ref></type>
        <definition>Xapian::doccount Xapian::FixedWeightPostingSource::get_termfreq_est</definition>
        <argsstring>() const </argsstring>
        <name>get_termfreq_est</name>
        <reimplements refid="classXapian_1_1PostingSource_10d67eda5783f82951d6c56ad7ff4205b">get_termfreq_est</reimplements>
        <briefdescription>
<para>An estimate of the number of documents this object can return. </para>        </briefdescription>
        <detaileddescription>
<para>It must always be true that:</para><para><ref refid="classXapian_1_1FixedWeightPostingSource_142262ab06f7d9d2f3122bc3fb115b23e" kindref="member">get_termfreq_min()</ref> &lt;= <ref refid="classXapian_1_1FixedWeightPostingSource_13296c3490733ac9f36e2dff0719746a5" kindref="member">get_termfreq_est()</ref> &lt;= <ref refid="classXapian_1_1FixedWeightPostingSource_141f8f0e959f0d7daf5915b7507d4f5df" kindref="member">get_termfreq_max()</ref></para><para><ref refid="namespaceXapian" kindref="compound">Xapian</ref> will always call <ref refid="classXapian_1_1FixedWeightPostingSource_13c9698d1d0d4d47247bd19451e1e2077" kindref="member">init()</ref> on a <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> before calling this for the first time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="557"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1FixedWeightPostingSource_141f8f0e959f0d7daf5915b7507d4f5df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceXapian_17f30aa95f0c42b117dafaf66ba24241d" kindref="member">Xapian::doccount</ref></type>
        <definition>Xapian::doccount Xapian::FixedWeightPostingSource::get_termfreq_max</definition>
        <argsstring>() const </argsstring>
        <name>get_termfreq_max</name>
        <reimplements refid="classXapian_1_1PostingSource_117de27c84a052c51d62ad498151a4cab">get_termfreq_max</reimplements>
        <briefdescription>
<para>An upper bound on the number of documents this object can return. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="namespaceXapian" kindref="compound">Xapian</ref> will always call <ref refid="classXapian_1_1FixedWeightPostingSource_13c9698d1d0d4d47247bd19451e1e2077" kindref="member">init()</ref> on a <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> before calling this for the first time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="558"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1FixedWeightPostingSource_18410aea1310c2fa7e5a078fe9429e6af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceXapian_1cac12803afc9e24ee5141c119acb8884" kindref="member">Xapian::weight</ref></type>
        <definition>Xapian::weight Xapian::FixedWeightPostingSource::get_weight</definition>
        <argsstring>() const </argsstring>
        <name>get_weight</name>
        <reimplements refid="classXapian_1_1PostingSource_12e7637a323a90bea45f2dc68c916ea00">get_weight</reimplements>
        <briefdescription>
<para>Return the weight contribution for the current document. </para>        </briefdescription>
        <detaileddescription>
<para>This default implementation always returns 0, for convenience when implementing &quot;weight-less&quot; <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> subclasses.</para><para>This method may assume that it will only be called when there is a &quot;current document&quot;. In detail: <ref refid="namespaceXapian" kindref="compound">Xapian</ref> will always call <ref refid="classXapian_1_1FixedWeightPostingSource_13c9698d1d0d4d47247bd19451e1e2077" kindref="member">init()</ref> on a <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> before calling this for the first time. It will also only call this if the <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> reports that it is pointing to a valid document (ie, it will not call it before calling at least one of <ref refid="classXapian_1_1FixedWeightPostingSource_177675d1d2175f8de6b10c363f0a73143" kindref="member">next()</ref>, <ref refid="classXapian_1_1FixedWeightPostingSource_111598d752e5a8d2d3788430b120e665f" kindref="member">skip_to()</ref> or <ref refid="classXapian_1_1FixedWeightPostingSource_16b51fb24303528060e48df95ada3d989" kindref="member">check()</ref>, and will ensure that the <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> is not at the end by calling <ref refid="classXapian_1_1FixedWeightPostingSource_1c1913462adbcea9216b04180f62f41a0" kindref="member">at_end()</ref>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="560"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1FixedWeightPostingSource_177675d1d2175f8de6b10c363f0a73143" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Xapian::FixedWeightPostingSource::next</definition>
        <argsstring>(Xapian::weight min_wt)</argsstring>
        <name>next</name>
        <reimplements refid="classXapian_1_1PostingSource_1fd0261e7b428c2a25245da07170e9635">next</reimplements>
        <param>
          <type><ref refid="namespaceXapian_1cac12803afc9e24ee5141c119acb8884" kindref="member">Xapian::weight</ref></type>
          <declname>min_wt</declname>
        </param>
        <briefdescription>
<para>Advance the current position to the next matching document. </para>        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> starts before the first entry in the list, so <ref refid="classXapian_1_1FixedWeightPostingSource_177675d1d2175f8de6b10c363f0a73143" kindref="member">next()</ref> must be called before any methods which need the context of the current position.</para><para><ref refid="namespaceXapian" kindref="compound">Xapian</ref> will always call <ref refid="classXapian_1_1FixedWeightPostingSource_13c9698d1d0d4d47247bd19451e1e2077" kindref="member">init()</ref> on a <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> before calling this for the first time.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_wt</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum weight contribution that is needed (this is just a hint which subclasses may ignore). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="562"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1FixedWeightPostingSource_111598d752e5a8d2d3788430b120e665f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Xapian::FixedWeightPostingSource::skip_to</definition>
        <argsstring>(Xapian::docid min_docid, Xapian::weight min_wt)</argsstring>
        <name>skip_to</name>
        <reimplements refid="classXapian_1_1PostingSource_102e3f5e29a0605d7f9e0a09decbdd9bf">skip_to</reimplements>
        <param>
          <type><ref refid="namespaceXapian_18fa9094bebe1256a7be935a5ede87a64" kindref="member">Xapian::docid</ref></type>
          <declname>did</declname>
        </param>
        <param>
          <type><ref refid="namespaceXapian_1cac12803afc9e24ee5141c119acb8884" kindref="member">Xapian::weight</ref></type>
          <declname>min_wt</declname>
        </param>
        <briefdescription>
<para>Advance to the specified docid. </para>        </briefdescription>
        <detaileddescription>
<para>If the specified docid isn&apos;t in the list, position ourselves on the first document after it (or <ref refid="classXapian_1_1FixedWeightPostingSource_1c1913462adbcea9216b04180f62f41a0" kindref="member">at_end()</ref> if no greater docids are present).</para><para>If the current position is already the specified docid, this method will leave the position unmodified.</para><para>If the specified docid is earlier than the current position, the behaviour is unspecified. A sensible behaviour would be to leave the current position unmodified, but it is also reasonable to move to the specified docid.</para><para>The default implementation calls <ref refid="classXapian_1_1FixedWeightPostingSource_177675d1d2175f8de6b10c363f0a73143" kindref="member">next()</ref> repeatedly, which works but <ref refid="classXapian_1_1FixedWeightPostingSource_111598d752e5a8d2d3788430b120e665f" kindref="member">skip_to()</ref> can often be implemented much more efficiently.</para><para><ref refid="namespaceXapian" kindref="compound">Xapian</ref> will always call <ref refid="classXapian_1_1FixedWeightPostingSource_13c9698d1d0d4d47247bd19451e1e2077" kindref="member">init()</ref> on a <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> before calling this for the first time.</para><para>Note: in the case of a multi-database search, the docid specified is the docid in the single subdatabase relevant to this posting source. See the <emphasis><ref refid="classXapian_1_1FixedWeightPostingSource_13c9698d1d0d4d47247bd19451e1e2077" kindref="member">init()</ref></emphasis> method for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_wt</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum weight contribution that is needed (this is just a hint which subclasses may ignore). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="563"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1FixedWeightPostingSource_16b51fb24303528060e48df95ada3d989" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Xapian::FixedWeightPostingSource::check</definition>
        <argsstring>(Xapian::docid min_docid, Xapian::weight min_wt)</argsstring>
        <name>check</name>
        <reimplements refid="classXapian_1_1PostingSource_192098dee93d09781bb5ad48e86434873">check</reimplements>
        <param>
          <type><ref refid="namespaceXapian_18fa9094bebe1256a7be935a5ede87a64" kindref="member">Xapian::docid</ref></type>
          <declname>did</declname>
        </param>
        <param>
          <type><ref refid="namespaceXapian_1cac12803afc9e24ee5141c119acb8884" kindref="member">Xapian::weight</ref></type>
          <declname>min_wt</declname>
        </param>
        <briefdescription>
<para>Check if the specified docid occurs. </para>        </briefdescription>
        <detaileddescription>
<para>The caller is required to ensure that the specified document id <emphasis>did</emphasis> actually exists in the database. If it does, it must move to that document id, and return true. If it does not, it may either:</para><para><itemizedlist>
<listitem><para>return true, having moved to a definite position (including &quot;at_end&quot;), which must be the same position as <ref refid="classXapian_1_1FixedWeightPostingSource_111598d752e5a8d2d3788430b120e665f" kindref="member">skip_to()</ref> would have moved to.</para></listitem></itemizedlist>
</para><para>or</para><para><itemizedlist>
<listitem><para>return false, having moved to an &quot;indeterminate&quot; position, such that a subsequent call to <ref refid="classXapian_1_1FixedWeightPostingSource_177675d1d2175f8de6b10c363f0a73143" kindref="member">next()</ref> or <ref refid="classXapian_1_1FixedWeightPostingSource_111598d752e5a8d2d3788430b120e665f" kindref="member">skip_to()</ref> will move to the next matching position after <emphasis>did</emphasis>.</para></listitem></itemizedlist>
</para><para>Generally, this method should act like <ref refid="classXapian_1_1FixedWeightPostingSource_111598d752e5a8d2d3788430b120e665f" kindref="member">skip_to()</ref> and return true if that can be done at little extra cost.</para><para>Otherwise it should simply check if a particular docid is present, returning true if it is, and false if it isn&apos;t.</para><para>The default implementation calls <ref refid="classXapian_1_1FixedWeightPostingSource_111598d752e5a8d2d3788430b120e665f" kindref="member">skip_to()</ref> and always returns true.</para><para><ref refid="namespaceXapian" kindref="compound">Xapian</ref> will always call <ref refid="classXapian_1_1FixedWeightPostingSource_13c9698d1d0d4d47247bd19451e1e2077" kindref="member">init()</ref> on a <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> before calling this for the first time.</para><para>Note: in the case of a multi-database search, the docid specified is the docid in the single subdatabase relevant to this posting source. See the <emphasis><ref refid="classXapian_1_1FixedWeightPostingSource_13c9698d1d0d4d47247bd19451e1e2077" kindref="member">init()</ref></emphasis> method for details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="564"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1FixedWeightPostingSource_1c1913462adbcea9216b04180f62f41a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Xapian::FixedWeightPostingSource::at_end</definition>
        <argsstring>() const </argsstring>
        <name>at_end</name>
        <reimplements refid="classXapian_1_1PostingSource_198831c9fdea1599f588cd9fef51bbeb5">at_end</reimplements>
        <briefdescription>
<para>Return true if the current position is past the last entry in this list. </para>        </briefdescription>
        <detaileddescription>
<para>At least one of <emphasis><ref refid="classXapian_1_1FixedWeightPostingSource_177675d1d2175f8de6b10c363f0a73143" kindref="member">next()</ref></emphasis>, <emphasis><ref refid="classXapian_1_1FixedWeightPostingSource_111598d752e5a8d2d3788430b120e665f" kindref="member">skip_to()</ref></emphasis> or <emphasis><ref refid="classXapian_1_1FixedWeightPostingSource_16b51fb24303528060e48df95ada3d989" kindref="member">check()</ref></emphasis> will be called before this method is first called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="566"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1FixedWeightPostingSource_1f565f2685bec715d5cbd489f5acc50a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceXapian_18fa9094bebe1256a7be935a5ede87a64" kindref="member">Xapian::docid</ref></type>
        <definition>Xapian::docid Xapian::FixedWeightPostingSource::get_docid</definition>
        <argsstring>() const </argsstring>
        <name>get_docid</name>
        <reimplements refid="classXapian_1_1PostingSource_17b1bd1fcd07d69204f70155588ae544a">get_docid</reimplements>
        <briefdescription>
<para>Return the current docid. </para>        </briefdescription>
        <detaileddescription>
<para>This method may assume that it will only be called when there is a &quot;current document&quot;. See <emphasis><ref refid="classXapian_1_1FixedWeightPostingSource_18410aea1310c2fa7e5a078fe9429e6af" kindref="member">get_weight()</ref></emphasis> for details.</para><para>Note: in the case of a multi-database search, the returned docid should be in the single subdatabase relevant to this posting source. See the <emphasis><ref refid="classXapian_1_1FixedWeightPostingSource_13c9698d1d0d4d47247bd19451e1e2077" kindref="member">init()</ref></emphasis> method for details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="568"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1FixedWeightPostingSource_1ad5669a2fa3d08bea18d0304823222d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classXapian_1_1FixedWeightPostingSource" kindref="compound">FixedWeightPostingSource</ref> *</type>
        <definition>FixedWeightPostingSource* Xapian::FixedWeightPostingSource::clone</definition>
        <argsstring>() const </argsstring>
        <name>clone</name>
        <reimplements refid="classXapian_1_1PostingSource_1ecd88a39155ec5e04c752360b657f315">clone</reimplements>
        <briefdescription>
<para>Clone the posting source. </para>        </briefdescription>
        <detaileddescription>
<para>The clone should inherit the configuration of the parent, but need not inherit the state. ie, the clone does not need to be in the same iteration position as the original: the matcher will always call <ref refid="classXapian_1_1FixedWeightPostingSource_13c9698d1d0d4d47247bd19451e1e2077" kindref="member">init()</ref> on the clone before attempting to move the iterator, or read the information about the current position of the iterator.</para><para>This may return NULL to indicate that cloning is not supported. In this case, the <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> may only be used with a single-database search.</para><para>The default implementation returns NULL.</para><para>Note that the returned object will be deallocated by <ref refid="namespaceXapian" kindref="compound">Xapian</ref> after use with &quot;delete&quot;. It must therefore have been allocated with &quot;new&quot;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="570"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1FixedWeightPostingSource_128fc3f906a9b56f8c4ebad2e82d3d531" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string Xapian::FixedWeightPostingSource::name</definition>
        <argsstring>() const </argsstring>
        <name>name</name>
        <reimplements refid="classXapian_1_1PostingSource_17b5c506178f996e59ed641ad62520734">name</reimplements>
        <briefdescription>
<para>Name of the posting source class. </para>        </briefdescription>
        <detaileddescription>
<para>This is used when serialising and unserialising posting sources; for example, for performing remote searches.</para><para>If the subclass is in a C++ namespace, the namespace should be included in the name, using &quot;::&quot; as a separator. For example, for a <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> subclass called &quot;FooPostingSource&quot; in the &quot;Xapian&quot; namespace the result of this call should be &quot;Xapian::FooPostingSource&quot;.</para><para>This should only be implemented if <ref refid="classXapian_1_1FixedWeightPostingSource_1b9f650935d97b18388dd112101336355" kindref="member">serialise()</ref> and <ref refid="classXapian_1_1FixedWeightPostingSource_17d70385221859891b250e526c791ce67" kindref="member">unserialise()</ref> are also implemented. The default implementation returns an empty string.</para><para>If this returns an empty string, <ref refid="namespaceXapian" kindref="compound">Xapian</ref> will assume that <ref refid="classXapian_1_1FixedWeightPostingSource_1b9f650935d97b18388dd112101336355" kindref="member">serialise()</ref> and <ref refid="classXapian_1_1FixedWeightPostingSource_17d70385221859891b250e526c791ce67" kindref="member">unserialise()</ref> are not implemented. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="571"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1FixedWeightPostingSource_1b9f650935d97b18388dd112101336355" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string Xapian::FixedWeightPostingSource::serialise</definition>
        <argsstring>() const </argsstring>
        <name>serialise</name>
        <reimplements refid="classXapian_1_1PostingSource_16ad26dc173cf1ab175dea945ba2622e0">serialise</reimplements>
        <briefdescription>
<para>Serialise object parameters into a string. </para>        </briefdescription>
        <detaileddescription>
<para>The serialised parameters should represent the configuration of the posting source, but need not (indeed, should not) represent the current iteration state.</para><para>If you don&apos;t want to support the remote backend, you can use the default implementation which simply throws <ref refid="classXapian_1_1UnimplementedError" kindref="compound">Xapian::UnimplementedError</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="572"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1FixedWeightPostingSource_17d70385221859891b250e526c791ce67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classXapian_1_1FixedWeightPostingSource" kindref="compound">FixedWeightPostingSource</ref> *</type>
        <definition>FixedWeightPostingSource* Xapian::FixedWeightPostingSource::unserialise</definition>
        <argsstring>(const std::string &amp;s) const </argsstring>
        <name>unserialise</name>
        <reimplements refid="classXapian_1_1PostingSource_1b3312a9172b1881c354faf3d2d9b585d">unserialise</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Create object given string serialisation returned by <ref refid="classXapian_1_1FixedWeightPostingSource_1b9f650935d97b18388dd112101336355" kindref="member">serialise()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the returned object will be deallocated by <ref refid="namespaceXapian" kindref="compound">Xapian</ref> after use with &quot;delete&quot;. It must therefore have been allocated with &quot;new&quot;.</para><para>If you don&apos;t want to support the remote backend, you can use the default implementation which simply throws <ref refid="classXapian_1_1UnimplementedError" kindref="compound">Xapian::UnimplementedError</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>A serialised instance of this <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> subclass. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="573"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1FixedWeightPostingSource_13c9698d1d0d4d47247bd19451e1e2077" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Xapian::FixedWeightPostingSource::init</definition>
        <argsstring>(const Database &amp;db_)</argsstring>
        <name>init</name>
        <reimplements refid="classXapian_1_1PostingSource_181d793170b496022488c15c3508979b5">init</reimplements>
        <param>
          <type>const <ref refid="classXapian_1_1Database" kindref="compound">Database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
<para>Set this <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> to the start of the list of postings. </para>        </briefdescription>
        <detaileddescription>
<para>This is called automatically by the matcher prior to each query being processed.</para><para>If a <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> is used for multiple searches, <emphasis><ref refid="classXapian_1_1FixedWeightPostingSource_13c9698d1d0d4d47247bd19451e1e2077" kindref="member">init()</ref></emphasis> will therefore be called multiple times, and must handle this by using the database passed in the most recent call.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>db</parametername>
</parameternamelist>
<parameterdescription>
<para>The database which the <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> should iterate through.</para></parameterdescription>
</parameteritem>
</parameterlist>
Note: the database supplied to this method must not be modified: in particular, the reopen() method should not be called on it.</para><para>Note: in the case of a multi-database search, a separate <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> will be used for each database (the separate PostingSources will be obtained using <emphasis><ref refid="classXapian_1_1FixedWeightPostingSource_1ad5669a2fa3d08bea18d0304823222d4" kindref="member">clone()</ref></emphasis>), and each <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> will be passed one of the sub-databases as the <emphasis>db</emphasis> parameter here. The <emphasis>db</emphasis> parameter will therefore always refer to a single database. All docids passed to, or returned from, the <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> refer to docids in that single database, rather than in the multi-database. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="574"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1FixedWeightPostingSource_1eb48203eb1b35190d6bffe351bec38e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string Xapian::FixedWeightPostingSource::get_description</definition>
        <argsstring>() const </argsstring>
        <name>get_description</name>
        <reimplements refid="classXapian_1_1PostingSource_147d794241880cc691df1c3a3896d1050">get_description</reimplements>
        <briefdescription>
<para>Return a string describing this object. </para>        </briefdescription>
        <detaileddescription>
<para>This default implementation returns a generic answer. This default it provided to avoid forcing those deriving their own <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> subclass from having to implement this (they may not care what <ref refid="classXapian_1_1FixedWeightPostingSource_1eb48203eb1b35190d6bffe351bec38e5" kindref="member">get_description()</ref> gives for their subclass). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="576"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A posting source which returns a fixed weight for all documents. </para>    </briefdescription>
    <detaileddescription>
<para>This returns entries for all documents in the given database, with a fixed weight (specified by a parameter to the constructor). </para>    </detaileddescription>
    <inheritancegraph>
      <node id="455">
        <label>Xapian::FixedWeightPostingSource</label>
        <link refid="classXapian_1_1FixedWeightPostingSource"/>
        <childnode refid="456" relation="public-inheritance">
        </childnode>
      </node>
      <node id="456">
        <label>Xapian::PostingSource</label>
        <link refid="classXapian_1_1PostingSource"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="459">
        <label>Xapian::PostingIterator</label>
        <link refid="classXapian_1_1PostingIterator"/>
      </node>
      <node id="457">
        <label>Xapian::FixedWeightPostingSource</label>
        <link refid="classXapian_1_1FixedWeightPostingSource"/>
        <childnode refid="458" relation="public-inheritance">
        </childnode>
        <childnode refid="459" relation="usage">
          <edgelabel>it</edgelabel>
        </childnode>
        <childnode refid="460" relation="usage">
          <edgelabel>db</edgelabel>
        </childnode>
      </node>
      <node id="460">
        <label>Xapian::Database</label>
        <link refid="classXapian_1_1Database"/>
      </node>
      <node id="458">
        <label>Xapian::PostingSource</label>
        <link refid="classXapian_1_1PostingSource"/>
      </node>
    </collaborationgraph>
    <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="533" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" bodystart="533" bodyend="577"/>
    <listofallmembers>
      <member refid="classXapian_1_1FixedWeightPostingSource_1c1913462adbcea9216b04180f62f41a0" prot="public" virt="virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>at_end</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_16b51fb24303528060e48df95ada3d989" prot="public" virt="virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>check</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_1b26915856a255989b862c497e3f5113b" prot="private" virt="non-virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>check_docid</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_1ad5669a2fa3d08bea18d0304823222d4" prot="public" virt="virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>clone</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_1f4bc6b19f4d717fa1f34b8fb7d01f241" prot="private" virt="non-virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>db</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_1f946b00ce498fa513a1f1a6781d70a61" prot="public" virt="non-virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>FixedWeightPostingSource</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_1eb48203eb1b35190d6bffe351bec38e5" prot="public" virt="virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>get_description</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_1f565f2685bec715d5cbd489f5acc50a3" prot="public" virt="virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>get_docid</name></member>
      <member refid="classXapian_1_1PostingSource_1620fa76be33e59e0bd5fc4caa479e6ee" prot="public" virt="non-virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>get_maxweight</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_13296c3490733ac9f36e2dff0719746a5" prot="public" virt="virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>get_termfreq_est</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_141f8f0e959f0d7daf5915b7507d4f5df" prot="public" virt="virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>get_termfreq_max</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_142262ab06f7d9d2f3122bc3fb115b23e" prot="public" virt="virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>get_termfreq_min</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_18410aea1310c2fa7e5a078fe9429e6af" prot="public" virt="virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>get_weight</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_13c9698d1d0d4d47247bd19451e1e2077" prot="public" virt="virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>init</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_10e6ae9d378caac41e347c5d1c08a7867" prot="private" virt="non-virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>it</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_128fc3f906a9b56f8c4ebad2e82d3d531" prot="public" virt="virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>name</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_177675d1d2175f8de6b10c363f0a73143" prot="public" virt="virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>next</name></member>
      <member refid="classXapian_1_1PostingSource_182e85d6113d9c8e72cbbf4b3362f3fd6" prot="protected" virt="non-virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>PostingSource</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_1b9f650935d97b18388dd112101336355" prot="public" virt="virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>serialise</name></member>
      <member refid="classXapian_1_1PostingSource_10643cf1dfb1c3ed2dd1cf5ecfe3f3a10" prot="protected" virt="non-virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>set_maxweight</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_111598d752e5a8d2d3788430b120e665f" prot="public" virt="virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>skip_to</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_1932b6c2771ea023a26d671c5ea623ff8" prot="private" virt="non-virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>started</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_1cccc5a45afd0115647ddc96193bff225" prot="private" virt="non-virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>termfreq</name></member>
      <member refid="classXapian_1_1FixedWeightPostingSource_17d70385221859891b250e526c791ce67" prot="public" virt="virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>unserialise</name></member>
      <member refid="classXapian_1_1PostingSource_1679981b0badcc1a6308d4cbf8c5de7a0" prot="public" virt="virtual"><scope>Xapian::FixedWeightPostingSource</scope><name>~PostingSource</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
