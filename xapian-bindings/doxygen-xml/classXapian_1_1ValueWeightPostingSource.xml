<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.9">
  <compounddef id="classXapian_1_1ValueWeightPostingSource" kind="class" prot="public">
    <compoundname>Xapian::ValueWeightPostingSource</compoundname>
    <basecompoundref refid="classXapian_1_1ValuePostingSource" prot="public" virt="non-virtual">Xapian::ValuePostingSource</basecompoundref>
    <derivedcompoundref refid="classXapian_1_1DecreasingValueWeightPostingSource" prot="public" virt="non-virtual">Xapian::DecreasingValueWeightPostingSource</derivedcompoundref>
    <includes local="no">postingsource.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classXapian_1_1ValueWeightPostingSource_153b029396164d214d54eb3b3c8640243" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Xapian::ValueWeightPostingSource::ValueWeightPostingSource</definition>
        <argsstring>(Xapian::valueno slot_)</argsstring>
        <name>ValueWeightPostingSource</name>
        <param>
          <type><ref refid="namespaceXapian_194a899651fa920c72ffa9635bde630ea" kindref="member">Xapian::valueno</ref></type>
          <declname>slot_</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classXapian_1_1ValueWeightPostingSource" kindref="compound">ValueWeightPostingSource</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slot_</parametername>
</parameternamelist>
<parameterdescription>
<para>The value slot to read values from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="413"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueWeightPostingSource_1b9159e5e12e909272fa2b776bb95cdaa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceXapian_1cac12803afc9e24ee5141c119acb8884" kindref="member">Xapian::weight</ref></type>
        <definition>Xapian::weight Xapian::ValueWeightPostingSource::get_weight</definition>
        <argsstring>() const </argsstring>
        <name>get_weight</name>
        <reimplements refid="classXapian_1_1PostingSource_12e7637a323a90bea45f2dc68c916ea00">get_weight</reimplements>
        <reimplementedby refid="classXapian_1_1DecreasingValueWeightPostingSource_11f302377fd46ed471987939be3f24bab">get_weight</reimplementedby>
        <briefdescription>
<para>Return the weight contribution for the current document. </para>        </briefdescription>
        <detaileddescription>
<para>This default implementation always returns 0, for convenience when implementing &quot;weight-less&quot; <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> subclasses.</para><para>This method may assume that it will only be called when there is a &quot;current document&quot;. In detail: <ref refid="namespaceXapian" kindref="compound">Xapian</ref> will always call <ref refid="classXapian_1_1ValueWeightPostingSource_1c3844351e28448d1de38fe089d626db4" kindref="member">init()</ref> on a <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> before calling this for the first time. It will also only call this if the <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> reports that it is pointing to a valid document (ie, it will not call it before calling at least one of <ref refid="classXapian_1_1ValuePostingSource_187b22aac8422f80124b50a456d1d85b0" kindref="member">next()</ref>, <ref refid="classXapian_1_1ValuePostingSource_1f11095a4355f96d7bc12074a5a91cd93" kindref="member">skip_to()</ref> or <ref refid="classXapian_1_1ValuePostingSource_171868e54627098425820f7a76e259197" kindref="member">check()</ref>, and will ensure that the <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> is not at the end by calling <ref refid="classXapian_1_1ValuePostingSource_14bb7ea314dbd569f90f89731204cdc40" kindref="member">at_end()</ref>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="415"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueWeightPostingSource_1a157a293a1b54a3d70d1d55f5de26895" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classXapian_1_1ValueWeightPostingSource" kindref="compound">ValueWeightPostingSource</ref> *</type>
        <definition>ValueWeightPostingSource* Xapian::ValueWeightPostingSource::clone</definition>
        <argsstring>() const </argsstring>
        <name>clone</name>
        <reimplements refid="classXapian_1_1PostingSource_1ecd88a39155ec5e04c752360b657f315">clone</reimplements>
        <reimplementedby refid="classXapian_1_1DecreasingValueWeightPostingSource_1fcaba0011386e195aeb81836fd0adc5d">clone</reimplementedby>
        <briefdescription>
<para>Clone the posting source. </para>        </briefdescription>
        <detaileddescription>
<para>The clone should inherit the configuration of the parent, but need not inherit the state. ie, the clone does not need to be in the same iteration position as the original: the matcher will always call <ref refid="classXapian_1_1ValueWeightPostingSource_1c3844351e28448d1de38fe089d626db4" kindref="member">init()</ref> on the clone before attempting to move the iterator, or read the information about the current position of the iterator.</para><para>This may return NULL to indicate that cloning is not supported. In this case, the <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> may only be used with a single-database search.</para><para>The default implementation returns NULL.</para><para>Note that the returned object will be deallocated by <ref refid="namespaceXapian" kindref="compound">Xapian</ref> after use with &quot;delete&quot;. It must therefore have been allocated with &quot;new&quot;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="416"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueWeightPostingSource_135d0b218fa9db907c36e62d60b900808" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string Xapian::ValueWeightPostingSource::name</definition>
        <argsstring>() const </argsstring>
        <name>name</name>
        <reimplements refid="classXapian_1_1PostingSource_17b5c506178f996e59ed641ad62520734">name</reimplements>
        <reimplementedby refid="classXapian_1_1DecreasingValueWeightPostingSource_19f1d3ffcfbea32d66ebc690426d9be90">name</reimplementedby>
        <briefdescription>
<para>Name of the posting source class. </para>        </briefdescription>
        <detaileddescription>
<para>This is used when serialising and unserialising posting sources; for example, for performing remote searches.</para><para>If the subclass is in a C++ namespace, the namespace should be included in the name, using &quot;::&quot; as a separator. For example, for a <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> subclass called &quot;FooPostingSource&quot; in the &quot;Xapian&quot; namespace the result of this call should be &quot;Xapian::FooPostingSource&quot;.</para><para>This should only be implemented if <ref refid="classXapian_1_1ValueWeightPostingSource_11bdc574c2f1c02472a4ec5fee697af87" kindref="member">serialise()</ref> and <ref refid="classXapian_1_1ValueWeightPostingSource_1ff018c57b785507a3bba82e85ec7fb63" kindref="member">unserialise()</ref> are also implemented. The default implementation returns an empty string.</para><para>If this returns an empty string, <ref refid="namespaceXapian" kindref="compound">Xapian</ref> will assume that <ref refid="classXapian_1_1ValueWeightPostingSource_11bdc574c2f1c02472a4ec5fee697af87" kindref="member">serialise()</ref> and <ref refid="classXapian_1_1ValueWeightPostingSource_1ff018c57b785507a3bba82e85ec7fb63" kindref="member">unserialise()</ref> are not implemented. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="417"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueWeightPostingSource_11bdc574c2f1c02472a4ec5fee697af87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string Xapian::ValueWeightPostingSource::serialise</definition>
        <argsstring>() const </argsstring>
        <name>serialise</name>
        <reimplements refid="classXapian_1_1PostingSource_16ad26dc173cf1ab175dea945ba2622e0">serialise</reimplements>
        <reimplementedby refid="classXapian_1_1DecreasingValueWeightPostingSource_12d3b48128b61bfd904163706c87065a8">serialise</reimplementedby>
        <briefdescription>
<para>Serialise object parameters into a string. </para>        </briefdescription>
        <detaileddescription>
<para>The serialised parameters should represent the configuration of the posting source, but need not (indeed, should not) represent the current iteration state.</para><para>If you don&apos;t want to support the remote backend, you can use the default implementation which simply throws <ref refid="classXapian_1_1UnimplementedError" kindref="compound">Xapian::UnimplementedError</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="418"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueWeightPostingSource_1ff018c57b785507a3bba82e85ec7fb63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classXapian_1_1ValueWeightPostingSource" kindref="compound">ValueWeightPostingSource</ref> *</type>
        <definition>ValueWeightPostingSource* Xapian::ValueWeightPostingSource::unserialise</definition>
        <argsstring>(const std::string &amp;s) const </argsstring>
        <name>unserialise</name>
        <reimplements refid="classXapian_1_1PostingSource_1b3312a9172b1881c354faf3d2d9b585d">unserialise</reimplements>
        <reimplementedby refid="classXapian_1_1DecreasingValueWeightPostingSource_15ef4c786055fcfe85ebc99cb98ba8409">unserialise</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Create object given string serialisation returned by <ref refid="classXapian_1_1ValueWeightPostingSource_11bdc574c2f1c02472a4ec5fee697af87" kindref="member">serialise()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the returned object will be deallocated by <ref refid="namespaceXapian" kindref="compound">Xapian</ref> after use with &quot;delete&quot;. It must therefore have been allocated with &quot;new&quot;.</para><para>If you don&apos;t want to support the remote backend, you can use the default implementation which simply throws <ref refid="classXapian_1_1UnimplementedError" kindref="compound">Xapian::UnimplementedError</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>A serialised instance of this <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> subclass. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="419"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueWeightPostingSource_1c3844351e28448d1de38fe089d626db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Xapian::ValueWeightPostingSource::init</definition>
        <argsstring>(const Database &amp;db_)</argsstring>
        <name>init</name>
        <reimplements refid="classXapian_1_1ValuePostingSource_1764328b2a7085e24393a94eb1d2b91e0">init</reimplements>
        <reimplementedby refid="classXapian_1_1DecreasingValueWeightPostingSource_1abbd9d95d77e2aa947377c44d1bb733c">init</reimplementedby>
        <param>
          <type>const <ref refid="classXapian_1_1Database" kindref="compound">Database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
<para>Set this <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> to the start of the list of postings. </para>        </briefdescription>
        <detaileddescription>
<para>This is called automatically by the matcher prior to each query being processed.</para><para>If a <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> is used for multiple searches, <emphasis><ref refid="classXapian_1_1ValueWeightPostingSource_1c3844351e28448d1de38fe089d626db4" kindref="member">init()</ref></emphasis> will therefore be called multiple times, and must handle this by using the database passed in the most recent call.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>db</parametername>
</parameternamelist>
<parameterdescription>
<para>The database which the <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> should iterate through.</para></parameterdescription>
</parameteritem>
</parameterlist>
Note: the database supplied to this method must not be modified: in particular, the reopen() method should not be called on it.</para><para>Note: in the case of a multi-database search, a separate <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> will be used for each database (the separate PostingSources will be obtained using <emphasis><ref refid="classXapian_1_1ValueWeightPostingSource_1a157a293a1b54a3d70d1d55f5de26895" kindref="member">clone()</ref></emphasis>), and each <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> will be passed one of the sub-databases as the <emphasis>db</emphasis> parameter here. The <emphasis>db</emphasis> parameter will therefore always refer to a single database. All docids passed to, or returned from, the <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> refer to docids in that single database, rather than in the multi-database. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="420"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueWeightPostingSource_1f39ca50c3edcd5b8e2cde72db07a4382" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string Xapian::ValueWeightPostingSource::get_description</definition>
        <argsstring>() const </argsstring>
        <name>get_description</name>
        <reimplements refid="classXapian_1_1PostingSource_147d794241880cc691df1c3a3896d1050">get_description</reimplements>
        <reimplementedby refid="classXapian_1_1DecreasingValueWeightPostingSource_1b9ec69881499b156c9317bc9d491ef91">get_description</reimplementedby>
        <briefdescription>
<para>Return a string describing this object. </para>        </briefdescription>
        <detaileddescription>
<para>This default implementation returns a generic answer. This default it provided to avoid forcing those deriving their own <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> subclass from having to implement this (they may not care what <ref refid="classXapian_1_1ValueWeightPostingSource_1f39ca50c3edcd5b8e2cde72db07a4382" kindref="member">get_description()</ref> gives for their subclass). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="422"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A posting source which reads weights from a value slot. </para>    </briefdescription>
    <detaileddescription>
<para>This returns entries for all documents in the given database which have a non empty values in the specified slot. It returns a weight calculated by applying sortable_unserialise to the value stored in the slot (so the values stored should probably have been calculated by applying sortable_serialise to a floating point number at index time).</para><para>The upper bound on the weight returned is set using the upper bound on the values in the specified slot, or DBL_MAX if value bounds aren&apos;t supported by the current backend.</para><para>For efficiency, this posting source doesn&apos;t check that the stored values are valid in any way, so it will never raise an exception due to invalid stored values. In particular, it doesn&apos;t ensure that the unserialised values are positive, which is a requirement for weights. The behaviour if the slot contains values which unserialise to negative values is undefined. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="751">
        <label>Xapian::ValuePostingSource</label>
        <link refid="classXapian_1_1ValuePostingSource"/>
        <childnode refid="752" relation="public-inheritance">
        </childnode>
      </node>
      <node id="753">
        <label>Xapian::DecreasingValueWeightPostingSource</label>
        <link refid="classXapian_1_1DecreasingValueWeightPostingSource"/>
        <childnode refid="750" relation="public-inheritance">
        </childnode>
      </node>
      <node id="750">
        <label>Xapian::ValueWeightPostingSource</label>
        <link refid="classXapian_1_1ValueWeightPostingSource"/>
        <childnode refid="751" relation="public-inheritance">
        </childnode>
      </node>
      <node id="752">
        <label>Xapian::PostingSource</label>
        <link refid="classXapian_1_1PostingSource"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="755">
        <label>Xapian::ValuePostingSource</label>
        <link refid="classXapian_1_1ValuePostingSource"/>
        <childnode refid="756" relation="public-inheritance">
        </childnode>
        <childnode refid="757" relation="usage">
          <edgelabel>value_it</edgelabel>
        </childnode>
        <childnode refid="758" relation="usage">
          <edgelabel>db</edgelabel>
        </childnode>
      </node>
      <node id="758">
        <label>Xapian::Database</label>
        <link refid="classXapian_1_1Database"/>
      </node>
      <node id="754">
        <label>Xapian::ValueWeightPostingSource</label>
        <link refid="classXapian_1_1ValueWeightPostingSource"/>
        <childnode refid="755" relation="public-inheritance">
        </childnode>
      </node>
      <node id="757">
        <label>Xapian::ValueIterator</label>
        <link refid="classXapian_1_1ValueIterator"/>
      </node>
      <node id="756">
        <label>Xapian::PostingSource</label>
        <link refid="classXapian_1_1PostingSource"/>
      </node>
    </collaborationgraph>
    <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="407" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" bodystart="406" bodyend="423"/>
    <listofallmembers>
      <member refid="classXapian_1_1ValuePostingSource_14bb7ea314dbd569f90f89731204cdc40" prot="public" virt="virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>at_end</name></member>
      <member refid="classXapian_1_1ValuePostingSource_171868e54627098425820f7a76e259197" prot="public" virt="virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>check</name></member>
      <member refid="classXapian_1_1ValueWeightPostingSource_1a157a293a1b54a3d70d1d55f5de26895" prot="public" virt="virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>clone</name></member>
      <member refid="classXapian_1_1ValuePostingSource_124ed690d4249ce0929a1a1ff236124f1" prot="protected" virt="non-virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>db</name></member>
      <member refid="classXapian_1_1ValueWeightPostingSource_1f39ca50c3edcd5b8e2cde72db07a4382" prot="public" virt="virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>get_description</name></member>
      <member refid="classXapian_1_1ValuePostingSource_16507d4d1a4119058890d92dfad53f40d" prot="public" virt="virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>get_docid</name></member>
      <member refid="classXapian_1_1PostingSource_1620fa76be33e59e0bd5fc4caa479e6ee" prot="public" virt="non-virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>get_maxweight</name></member>
      <member refid="classXapian_1_1ValuePostingSource_1dd937d003f986ff60119bffbac277d76" prot="public" virt="virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>get_termfreq_est</name></member>
      <member refid="classXapian_1_1ValuePostingSource_1c71b845c832955fe708d9ad6dbcf87e5" prot="public" virt="virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>get_termfreq_max</name></member>
      <member refid="classXapian_1_1ValuePostingSource_173743991ef0f5a2818d56c94e9e019f4" prot="public" virt="virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>get_termfreq_min</name></member>
      <member refid="classXapian_1_1ValueWeightPostingSource_1b9159e5e12e909272fa2b776bb95cdaa" prot="public" virt="virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>get_weight</name></member>
      <member refid="classXapian_1_1ValueWeightPostingSource_1c3844351e28448d1de38fe089d626db4" prot="public" virt="virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>init</name></member>
      <member refid="classXapian_1_1ValueWeightPostingSource_135d0b218fa9db907c36e62d60b900808" prot="public" virt="virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>name</name></member>
      <member refid="classXapian_1_1ValuePostingSource_187b22aac8422f80124b50a456d1d85b0" prot="public" virt="virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>next</name></member>
      <member refid="classXapian_1_1PostingSource_182e85d6113d9c8e72cbbf4b3362f3fd6" prot="protected" virt="non-virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>PostingSource</name></member>
      <member refid="classXapian_1_1ValueWeightPostingSource_11bdc574c2f1c02472a4ec5fee697af87" prot="public" virt="virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>serialise</name></member>
      <member refid="classXapian_1_1PostingSource_10643cf1dfb1c3ed2dd1cf5ecfe3f3a10" prot="protected" virt="non-virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>set_maxweight</name></member>
      <member refid="classXapian_1_1ValuePostingSource_1f11095a4355f96d7bc12074a5a91cd93" prot="public" virt="virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>skip_to</name></member>
      <member refid="classXapian_1_1ValuePostingSource_1efd7cda358e1dc81ccd72bfe7b0f940c" prot="protected" virt="non-virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>slot</name></member>
      <member refid="classXapian_1_1ValuePostingSource_1f961be7d3dcc2eb8b9e70744ce2c7597" prot="protected" virt="non-virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>started</name></member>
      <member refid="classXapian_1_1ValuePostingSource_1b9b4cc08e1ba2da73f059b2312ae3986" prot="protected" virt="non-virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>termfreq_est</name></member>
      <member refid="classXapian_1_1ValuePostingSource_13a7be278e6615876d57a254a60826c2f" prot="protected" virt="non-virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>termfreq_max</name></member>
      <member refid="classXapian_1_1ValuePostingSource_130f64f26a6faddc3f24b8c00e2ba5d0b" prot="protected" virt="non-virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>termfreq_min</name></member>
      <member refid="classXapian_1_1ValueWeightPostingSource_1ff018c57b785507a3bba82e85ec7fb63" prot="public" virt="virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>unserialise</name></member>
      <member refid="classXapian_1_1ValuePostingSource_1ddc0e75dc4ad4cfcf1f2d807bc3b32c4" prot="protected" virt="non-virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>value_it</name></member>
      <member refid="classXapian_1_1ValuePostingSource_1ccbffc6b7f573e9a41fc234a410a1ec3" prot="public" virt="non-virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>ValuePostingSource</name></member>
      <member refid="classXapian_1_1ValueWeightPostingSource_153b029396164d214d54eb3b3c8640243" prot="public" virt="non-virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>ValueWeightPostingSource</name></member>
      <member refid="classXapian_1_1PostingSource_1679981b0badcc1a6308d4cbf8c5de7a0" prot="public" virt="virtual"><scope>Xapian::ValueWeightPostingSource</scope><name>~PostingSource</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
