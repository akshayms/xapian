<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.9">
  <compounddef id="classXapian_1_1Letor" kind="class" prot="public">
    <compoundname>Xapian::Letor</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classXapian_1_1Letor_12684b258a0f5d7dda9d8cf3e51b7688c" prot="private" static="no" mutable="no">
        <type>Xapian::Internal::RefCntPtr&lt; Internal &gt;</type>
        <definition>Xapian::Internal::RefCntPtr&lt;Internal&gt; Xapian::Letor::internal</definition>
        <argsstring></argsstring>
        <name>internal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="40" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classXapian_1_1Letor_1a8df8e286218401f9b43892d89403eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Xapian::Letor::Letor</definition>
        <argsstring>(const Letor &amp;o)</argsstring>
        <name>Letor</name>
        <param>
          <type>const Letor &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="43"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_121319d313996f78b115510bebbfabadb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Letor &amp;</type>
        <definition>Letor&amp; Xapian::Letor::operator=</definition>
        <argsstring>(const Letor &amp;o)</argsstring>
        <name>operator=</name>
        <param>
          <type>const Letor &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Assignment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="46"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_1006bf58b147928cece0214c48e28afe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Xapian::Letor::Letor</definition>
        <argsstring>()</argsstring>
        <name>Letor</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="49"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_19ab92e64a61ae6ecc1002e40669797a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Xapian::Letor::~Letor</definition>
        <argsstring>()</argsstring>
        <name>~Letor</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="52"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_1485121f9c4f38944b58899ecdd5ea92f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Xapian::Letor::set_database</definition>
        <argsstring>(const Xapian::Database &amp;db)</argsstring>
        <name>set_database</name>
        <param>
          <type>const <ref refid="classXapian_1_1Database" kindref="compound">Xapian::Database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
<para>Specify the database to use for retrieval. This database will be used directly by the methods of Xapian::Letor::Internal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="55"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_137dc4c4baf9ceddad3452b5706adb078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Xapian::Letor::set_query</definition>
        <argsstring>(const Xapian::Query &amp;query)</argsstring>
        <name>set_query</name>
        <param>
          <type>const <ref refid="classXapian_1_1Query" kindref="compound">Xapian::Query</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>Specify the query. This will be used by the internal class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="58"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_1c193902a10942caf9c3f3c5820598fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, long int &gt;</type>
        <definition>std::map&lt;std::string,long int&gt; Xapian::Letor::termfreq</definition>
        <argsstring>(const Xapian::Document &amp;doc, const Xapian::Query &amp;query)</argsstring>
        <name>termfreq</name>
        <param>
          <type>const <ref refid="classXapian_1_1Document" kindref="compound">Xapian::Document</ref> &amp;</type>
          <declname>doc</declname>
        </param>
        <param>
          <type>const <ref refid="classXapian_1_1Query" kindref="compound">Xapian::Query</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>This method finds the frequency of the query terms in the specified documents. </para>        </briefdescription>
        <detaileddescription>
<para>This method is a helping method and statistics gathered through this method are used in feature value calculation. It return the frequency of the terms of query in std::map&lt;string,long int&gt; form.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>doc</parametername>
</parameternamelist>
<parameterdescription>
<para>This is the document in which we want the frequency of the terms in query. Generally in Letor, this document is taken from the Xapain::MSet retieved from the first retrieval. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>This is the query for which terms we want frequency in the document. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="67"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_1a1804b6fbb5bd984d718b11d80cf49a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, double &gt;</type>
        <definition>std::map&lt;std::string,double&gt; Xapian::Letor::inverse_doc_freq</definition>
        <argsstring>(const Xapian::Database &amp;db, const Xapian::Query &amp;query)</argsstring>
        <name>inverse_doc_freq</name>
        <param>
          <type>const <ref refid="classXapian_1_1Database" kindref="compound">Xapian::Database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>const <ref refid="classXapian_1_1Query" kindref="compound">Xapian::Query</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>This method calculated the inverse document frequency(idf) of query terms in the database. </para>        </briefdescription>
        <detaileddescription>
<para>It returns the idf of each term in std::map&lt;string,double&gt; form.</para><para>Note: idf of a term &apos;t&apos; is calculated as below:</para><para>idf(t) = log(N/df(t)) Where, N = Total number of documents in database and df(t) = number of documents containing term &apos;t&apos;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>db</parametername>
</parameternamelist>
<parameterdescription>
<para>specify the database being used for search to calculate idf values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>query being used in the retrieval </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="82"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_1df36584ff19f0b05d1aa79eb42734178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, long int &gt;</type>
        <definition>std::map&lt;std::string,long int&gt; Xapian::Letor::doc_length</definition>
        <argsstring>(const Xapian::Database &amp;db, const Xapian::Document &amp;doc)</argsstring>
        <name>doc_length</name>
        <param>
          <type>const <ref refid="classXapian_1_1Database" kindref="compound">Xapian::Database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>const <ref refid="classXapian_1_1Document" kindref="compound">Xapian::Document</ref> &amp;</type>
          <declname>doc</declname>
        </param>
        <briefdescription>
<para>This method calculated the length of the documents as number of &apos;terms&apos;. </para>        </briefdescription>
        <detaileddescription>
<para>It calculated the length for three different parts: title, body and whole document. This information is returned in the std::map&lt;string,long int&gt; format. It can be accessed as below:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/>map&lt;string,<sp/>long<sp/>int&gt;<sp/>len;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>len[</highlight><highlight class="stringliteral">&quot;title&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>len[</highlight><highlight class="stringliteral">&quot;body&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>len[</highlight><highlight class="stringliteral">&quot;whole&quot;</highlight><highlight class="normal">];</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>db</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classXapian_1_1Database" kindref="compound">Database</ref> containing that document. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>doc</parametername>
</parameternamelist>
<parameterdescription>
<para>The document whose length is to be found. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="98"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_1cb2850045d7759143d899e0ee421c7a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, long int &gt;</type>
        <definition>std::map&lt;std::string,long int&gt; Xapian::Letor::collection_length</definition>
        <argsstring>(const Xapian::Database &amp;db)</argsstring>
        <name>collection_length</name>
        <param>
          <type>const <ref refid="classXapian_1_1Database" kindref="compound">Xapian::Database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
<para>This method calculates the length of the collenction in number of terms for different parts like &apos;title&apos;, &apos;body&apos; and &apos;whole&apos;. </para>        </briefdescription>
        <detaileddescription>
<para>This is calculated as a stored user metadata in omindex otherwise it is calculated out of scratch(this might take some time depending upon the size of the database. Lenght information is stored in std::map&lt;string,long int&gt; format and can be accessed as below:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/>map&lt;string,<sp/>long<sp/>int&gt;<sp/>len;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>len[</highlight><highlight class="stringliteral">&quot;title&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>len[</highlight><highlight class="stringliteral">&quot;body&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>len[</highlight><highlight class="stringliteral">&quot;whole&quot;</highlight><highlight class="normal">];</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>db</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classXapian_1_1Database" kindref="compound">Database</ref> used for retrieval. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="114"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_189c2be1d2d717ad23f2833aa5b3c40e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, long int &gt;</type>
        <definition>std::map&lt;std::string,long int&gt; Xapian::Letor::collection_termfreq</definition>
        <argsstring>(const Xapian::Database &amp;db, const Xapian::Query &amp;query)</argsstring>
        <name>collection_termfreq</name>
        <param>
          <type>const <ref refid="classXapian_1_1Database" kindref="compound">Xapian::Database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <param>
          <type>const <ref refid="classXapian_1_1Query" kindref="compound">Xapian::Query</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>This method calculates the frequecny of query terms in the whole database. </para>        </briefdescription>
        <detaileddescription>
<para>The information is stored in std::map&lt;string, long int&gt; format and used during the feature calculation methods.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>db</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classXapian_1_1Database" kindref="compound">Database</ref> to be used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classXapian_1_1Query" kindref="compound">Query</ref> being searched. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="122"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_1c5db58ab6abfab6a3b85f7d5761aae2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Xapian::Letor::calculate_f1</definition>
        <argsstring>(const Xapian::Query &amp;query, std::map&lt; std::string, long int &gt; &amp;tf, char ch)</argsstring>
        <name>calculate_f1</name>
        <param>
          <type>const <ref refid="classXapian_1_1Query" kindref="compound">Xapian::Query</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, long int &gt; &amp;</type>
          <declname>tf</declname>
        </param>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>It calculated the feature value for the query-document pair. </para>        </briefdescription>
        <detaileddescription>
<para>These feature calculation methods uses the data generated using above defined methods like termfreq, inverse_doc_freq, doc_length, coll_freq and collection_length.</para><para>These features are depicted in overview documentation of Letor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classXapian_1_1Query" kindref="compound">Query</ref> being used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tf</parametername>
</parameternamelist>
<parameterdescription>
<para>Map generated using Letor::termfreq() method. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the part of document for which the value needs to be calculated. Values: &apos;t&apos; Title only &apos;b&apos; Body only &apos;w&apos; Whole document </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="136"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_10306e015158589c10c1b5de934c3dd26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Xapian::Letor::calculate_f2</definition>
        <argsstring>(const Xapian::Query &amp;query, std::map&lt; std::string, long int &gt; &amp;tf, std::map&lt; std::string, long int &gt; &amp;doc_length, char ch)</argsstring>
        <name>calculate_f2</name>
        <param>
          <type>const <ref refid="classXapian_1_1Query" kindref="compound">Xapian::Query</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, long int &gt; &amp;</type>
          <declname>tf</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, long int &gt; &amp;</type>
          <declname>doc_length</declname>
        </param>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="138"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_1fac4bc851b43336b15d36662701aea22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Xapian::Letor::calculate_f3</definition>
        <argsstring>(const Xapian::Query &amp;query, std::map&lt; std::string, double &gt; &amp;idf, char ch)</argsstring>
        <name>calculate_f3</name>
        <param>
          <type>const <ref refid="classXapian_1_1Query" kindref="compound">Xapian::Query</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="140"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_15779259e364bb2f26d32ddccbe8518d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Xapian::Letor::calculate_f4</definition>
        <argsstring>(const Xapian::Query &amp;query, std::map&lt; std::string, long int &gt; &amp;tf, std::map&lt; std::string, long int &gt; &amp;coll_len, char ch)</argsstring>
        <name>calculate_f4</name>
        <param>
          <type>const <ref refid="classXapian_1_1Query" kindref="compound">Xapian::Query</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, long int &gt; &amp;</type>
          <declname>tf</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, long int &gt; &amp;</type>
          <declname>coll_len</declname>
        </param>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="142"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_140c2fc0eb3c0a96ee51ec8c2e7dc4b9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Xapian::Letor::calculate_f5</definition>
        <argsstring>(const Xapian::Query &amp;query, std::map&lt; std::string, long int &gt; &amp;tf, std::map&lt; std::string, double &gt; &amp;idf, std::map&lt; std::string, long int &gt; &amp;doc_length, char ch)</argsstring>
        <name>calculate_f5</name>
        <param>
          <type>const <ref refid="classXapian_1_1Query" kindref="compound">Xapian::Query</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, long int &gt; &amp;</type>
          <declname>tf</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, double &gt; &amp;</type>
          <declname>idf</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, long int &gt; &amp;</type>
          <declname>doc_length</declname>
        </param>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="144"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_18668099f76de366a50519081b655c53e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Xapian::Letor::calculate_f6</definition>
        <argsstring>(const Xapian::Query &amp;query, std::map&lt; std::string, long int &gt; &amp;tf, std::map&lt; std::string, long int &gt; &amp;doc_length, std::map&lt; std::string, long int &gt; &amp;coll_tf, std::map&lt; std::string, long int &gt; &amp;coll_length, char ch)</argsstring>
        <name>calculate_f6</name>
        <param>
          <type>const <ref refid="classXapian_1_1Query" kindref="compound">Xapian::Query</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, long int &gt; &amp;</type>
          <declname>tf</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, long int &gt; &amp;</type>
          <declname>doc_length</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, long int &gt; &amp;</type>
          <declname>coll_tf</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, long int &gt; &amp;</type>
          <declname>coll_length</declname>
        </param>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="146"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_14c1a03ac092c937c9f460ecf83c7639d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="namespaceXapian_18fa9094bebe1256a7be935a5ede87a64" kindref="member">Xapian::docid</ref>, double &gt;</type>
        <definition>std::map&lt;Xapian::docid,double&gt; Xapian::Letor::letor_score</definition>
        <argsstring>(const Xapian::MSet &amp;mset)</argsstring>
        <name>letor_score</name>
        <param>
          <type>const <ref refid="classXapian_1_1MSet" kindref="compound">Xapian::MSet</ref> &amp;</type>
          <declname>mset</declname>
        </param>
        <briefdescription>
<para>Gives the scores to each item of initial mset using the trained model. </para>        </briefdescription>
        <detaileddescription>
<para>Note: It assigns a score to each document only so user needs to sort that map as descending order of the value of map.</para><para><simplesect kind="return"><para>Letor score corresponding to each document in mset as map&lt;docid,score&gt; format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="153"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_1f586ed725529a9db2e15ab8e12b33aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Xapian::Letor::letor_learn_model</definition>
        <argsstring>(int s, int k)</argsstring>
        <name>letor_learn_model</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>In this method the model is learnt and stored in &apos;model.txt&apos; file using training file &apos;train.txt&apos;. </para>        </briefdescription>
        <detaileddescription>
<para>It is required that libsvm is installed in the system. The SVM model is learnt using libsvm.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>its is svm_type (default s=4). In libsvm-3.1, 1 -- C-SVC 1 -- nu-SVC 2 -- one-class SVM 3 -- epsilon-SVR 4 -- nu-SVR </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>kernel_type (default k=0). In libsvm-3.1, 0 -- linear 1 -- polynomial 2 -- radial basis function 3 -- sigmoid 4 -- precomputed kernel </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="172"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1Letor_1a6fa5bfecf2e32d4c284c21d00c7dd8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Xapian::Letor::prepare_training_file</definition>
        <argsstring>(std::string query_file, std::string qrel_file, int msize)</argsstring>
        <name>prepare_training_file</name>
        <param>
          <type>std::string</type>
          <declname>query_file</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>qrel_file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>msize</declname>
        </param>
        <briefdescription>
<para>This method prepares the &apos;train.txt&apos; in the current working directory. </para>        </briefdescription>
        <detaileddescription>
<para>This file is used to train a model which in turn will be used to assign scores to the documents based of Learning-to-Rank model. File &apos;train.txt&apos; is created in the standard format of Letor training file as below:</para><para>0 qid:102 1:0.130742 2:0.000000 3:0.333333 4:0.000000 ... 18:0.750000 19:1.000000 <ref refid="namespaceXapian_18fa9094bebe1256a7be935a5ede87a64" kindref="member">docid</ref> = 13566007 1 qid:102 1:0.593640 2:1.000000 3:0.000000 4:0.000000 ... 18:0.500000 19:0.000000 <ref refid="namespaceXapian_18fa9094bebe1256a7be935a5ede87a64" kindref="member">docid</ref> = 0740276</para><para>where first column is relevance judgement of the document with docid as shown in the last column. The second column is query id and in between there are 19 feature values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>query_file</parametername>
</parameternamelist>
<parameterdescription>
<para>Here you have to give a path to the file (in free text form) containing training queries in specified format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>qrel_file</parametername>
</parameternamelist>
<parameterdescription>
<para>Here supply the path to the qrel file (in free text form) containing the relevance judgements for the queries in the training file. This file should be in standard format specified. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msize</parametername>
</parameternamelist>
<parameterdescription>
<para>This is the msize used for the first retrieval for training queries. It should be selected depending on te qrel file and database size. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="190"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" line="35" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/letor.h" bodystart="35" bodyend="191"/>
    <listofallmembers>
      <member refid="classXapian_1_1Letor_1c5db58ab6abfab6a3b85f7d5761aae2d" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>calculate_f1</name></member>
      <member refid="classXapian_1_1Letor_10306e015158589c10c1b5de934c3dd26" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>calculate_f2</name></member>
      <member refid="classXapian_1_1Letor_1fac4bc851b43336b15d36662701aea22" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>calculate_f3</name></member>
      <member refid="classXapian_1_1Letor_15779259e364bb2f26d32ddccbe8518d8" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>calculate_f4</name></member>
      <member refid="classXapian_1_1Letor_140c2fc0eb3c0a96ee51ec8c2e7dc4b9e" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>calculate_f5</name></member>
      <member refid="classXapian_1_1Letor_18668099f76de366a50519081b655c53e" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>calculate_f6</name></member>
      <member refid="classXapian_1_1Letor_1cb2850045d7759143d899e0ee421c7a8" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>collection_length</name></member>
      <member refid="classXapian_1_1Letor_189c2be1d2d717ad23f2833aa5b3c40e5" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>collection_termfreq</name></member>
      <member refid="classXapian_1_1Letor_1df36584ff19f0b05d1aa79eb42734178" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>doc_length</name></member>
      <member refid="classXapian_1_1Letor_12684b258a0f5d7dda9d8cf3e51b7688c" prot="private" virt="non-virtual"><scope>Xapian::Letor</scope><name>internal</name></member>
      <member refid="classXapian_1_1Letor_1a1804b6fbb5bd984d718b11d80cf49a2" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>inverse_doc_freq</name></member>
      <member refid="classXapian_1_1Letor_1a8df8e286218401f9b43892d89403eb0" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>Letor</name></member>
      <member refid="classXapian_1_1Letor_1006bf58b147928cece0214c48e28afe6" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>Letor</name></member>
      <member refid="classXapian_1_1Letor_1f586ed725529a9db2e15ab8e12b33aed" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>letor_learn_model</name></member>
      <member refid="classXapian_1_1Letor_14c1a03ac092c937c9f460ecf83c7639d" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>letor_score</name></member>
      <member refid="classXapian_1_1Letor_121319d313996f78b115510bebbfabadb" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>operator=</name></member>
      <member refid="classXapian_1_1Letor_1a6fa5bfecf2e32d4c284c21d00c7dd8f" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>prepare_training_file</name></member>
      <member refid="classXapian_1_1Letor_1485121f9c4f38944b58899ecdd5ea92f" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>set_database</name></member>
      <member refid="classXapian_1_1Letor_137dc4c4baf9ceddad3452b5706adb078" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>set_query</name></member>
      <member refid="classXapian_1_1Letor_1c193902a10942caf9c3f3c5820598fc0" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>termfreq</name></member>
      <member refid="classXapian_1_1Letor_19ab92e64a61ae6ecc1002e40669797a9" prot="public" virt="non-virtual"><scope>Xapian::Letor</scope><name>~Letor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
