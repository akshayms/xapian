<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.9">
  <compounddef id="classXapian_1_1ValueMapPostingSource" kind="class" prot="public">
    <compoundname>Xapian::ValueMapPostingSource</compoundname>
    <basecompoundref refid="classXapian_1_1ValuePostingSource" prot="public" virt="non-virtual">Xapian::ValuePostingSource</basecompoundref>
    <includes local="no">postingsource.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classXapian_1_1ValueMapPostingSource_1d4f6b6782529e222bcbaefaec9690e12" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Xapian::ValueMapPostingSource::default_weight</definition>
        <argsstring></argsstring>
        <name>default_weight</name>
        <briefdescription>
<para>The default weight. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="489" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" bodystart="489" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classXapian_1_1ValueMapPostingSource_14ccad7c8b7ab1261b49fc1899ca53e44" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Xapian::ValueMapPostingSource::max_weight_in_map</definition>
        <argsstring></argsstring>
        <name>max_weight_in_map</name>
        <briefdescription>
<para>The maximum weight in weight_map. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="492" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" bodystart="492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classXapian_1_1ValueMapPostingSource_141a51ab1654a4e21e00f5e84c19d5002" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, double &gt;</type>
        <definition>std::map&lt;std::string, double&gt; Xapian::ValueMapPostingSource::weight_map</definition>
        <argsstring></argsstring>
        <name>weight_map</name>
        <briefdescription>
<para>The value -&gt; weight map. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="495" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" bodystart="495" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classXapian_1_1ValueMapPostingSource_1ef9518eab055c5f1d3bea3fb8df4368f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Xapian::ValueMapPostingSource::ValueMapPostingSource</definition>
        <argsstring>(Xapian::valueno slot_)</argsstring>
        <name>ValueMapPostingSource</name>
        <param>
          <type><ref refid="namespaceXapian_194a899651fa920c72ffa9635bde630ea" kindref="member">Xapian::valueno</ref></type>
          <declname>slot_</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classXapian_1_1ValueWeightPostingSource" kindref="compound">ValueWeightPostingSource</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slot_</parametername>
</parameternamelist>
<parameterdescription>
<para>The value slot to read values from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="502"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueMapPostingSource_1126c88575ad8f06c850826ac7cd2a591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Xapian::ValueMapPostingSource::add_mapping</definition>
        <argsstring>(const std::string &amp;key, double wt)</argsstring>
        <name>add_mapping</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double</type>
          <declname>wt</declname>
        </param>
        <briefdescription>
<para>Add a mapping. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key looked up from the value slot. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>The weight to give this key. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="509"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueMapPostingSource_14f41218d580d29681e748a7d25aad8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Xapian::ValueMapPostingSource::clear_mappings</definition>
        <argsstring>()</argsstring>
        <name>clear_mappings</name>
        <briefdescription>
<para>Clear all mappings. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="512"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueMapPostingSource_1895c2f710b42bf93f71d0321225dc38f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Xapian::ValueMapPostingSource::set_default_weight</definition>
        <argsstring>(double wt)</argsstring>
        <name>set_default_weight</name>
        <param>
          <type>double</type>
          <declname>wt</declname>
        </param>
        <briefdescription>
<para>Set a default weight for document values not in the map. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="515"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueMapPostingSource_196cea230e42fa66778ac109501413327" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceXapian_1cac12803afc9e24ee5141c119acb8884" kindref="member">Xapian::weight</ref></type>
        <definition>Xapian::weight Xapian::ValueMapPostingSource::get_weight</definition>
        <argsstring>() const </argsstring>
        <name>get_weight</name>
        <reimplements refid="classXapian_1_1PostingSource_12e7637a323a90bea45f2dc68c916ea00">get_weight</reimplements>
        <briefdescription>
<para>Return the weight contribution for the current document. </para>        </briefdescription>
        <detaileddescription>
<para>This default implementation always returns 0, for convenience when implementing &quot;weight-less&quot; <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> subclasses.</para><para>This method may assume that it will only be called when there is a &quot;current document&quot;. In detail: <ref refid="namespaceXapian" kindref="compound">Xapian</ref> will always call <ref refid="classXapian_1_1ValueMapPostingSource_1e76de9cb534e96b7a0cc827d89eea8fc" kindref="member">init()</ref> on a <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> before calling this for the first time. It will also only call this if the <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> reports that it is pointing to a valid document (ie, it will not call it before calling at least one of <ref refid="classXapian_1_1ValuePostingSource_187b22aac8422f80124b50a456d1d85b0" kindref="member">next()</ref>, <ref refid="classXapian_1_1ValuePostingSource_1f11095a4355f96d7bc12074a5a91cd93" kindref="member">skip_to()</ref> or <ref refid="classXapian_1_1ValuePostingSource_171868e54627098425820f7a76e259197" kindref="member">check()</ref>, and will ensure that the <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> is not at the end by calling <ref refid="classXapian_1_1ValuePostingSource_14bb7ea314dbd569f90f89731204cdc40" kindref="member">at_end()</ref>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="517"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueMapPostingSource_175598085ba9e49e1a2fd0e232d191461" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classXapian_1_1ValueMapPostingSource" kindref="compound">ValueMapPostingSource</ref> *</type>
        <definition>ValueMapPostingSource* Xapian::ValueMapPostingSource::clone</definition>
        <argsstring>() const </argsstring>
        <name>clone</name>
        <reimplements refid="classXapian_1_1PostingSource_1ecd88a39155ec5e04c752360b657f315">clone</reimplements>
        <briefdescription>
<para>Clone the posting source. </para>        </briefdescription>
        <detaileddescription>
<para>The clone should inherit the configuration of the parent, but need not inherit the state. ie, the clone does not need to be in the same iteration position as the original: the matcher will always call <ref refid="classXapian_1_1ValueMapPostingSource_1e76de9cb534e96b7a0cc827d89eea8fc" kindref="member">init()</ref> on the clone before attempting to move the iterator, or read the information about the current position of the iterator.</para><para>This may return NULL to indicate that cloning is not supported. In this case, the <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> may only be used with a single-database search.</para><para>The default implementation returns NULL.</para><para>Note that the returned object will be deallocated by <ref refid="namespaceXapian" kindref="compound">Xapian</ref> after use with &quot;delete&quot;. It must therefore have been allocated with &quot;new&quot;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="518"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueMapPostingSource_1717c8ccd76b95946b07e68e759dcca97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string Xapian::ValueMapPostingSource::name</definition>
        <argsstring>() const </argsstring>
        <name>name</name>
        <reimplements refid="classXapian_1_1PostingSource_17b5c506178f996e59ed641ad62520734">name</reimplements>
        <briefdescription>
<para>Name of the posting source class. </para>        </briefdescription>
        <detaileddescription>
<para>This is used when serialising and unserialising posting sources; for example, for performing remote searches.</para><para>If the subclass is in a C++ namespace, the namespace should be included in the name, using &quot;::&quot; as a separator. For example, for a <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> subclass called &quot;FooPostingSource&quot; in the &quot;Xapian&quot; namespace the result of this call should be &quot;Xapian::FooPostingSource&quot;.</para><para>This should only be implemented if <ref refid="classXapian_1_1ValueMapPostingSource_1534c78ecea04a7a649d8ba27447edee3" kindref="member">serialise()</ref> and <ref refid="classXapian_1_1ValueMapPostingSource_1b3f716ff004f91e2ecc51548119f3891" kindref="member">unserialise()</ref> are also implemented. The default implementation returns an empty string.</para><para>If this returns an empty string, <ref refid="namespaceXapian" kindref="compound">Xapian</ref> will assume that <ref refid="classXapian_1_1ValueMapPostingSource_1534c78ecea04a7a649d8ba27447edee3" kindref="member">serialise()</ref> and <ref refid="classXapian_1_1ValueMapPostingSource_1b3f716ff004f91e2ecc51548119f3891" kindref="member">unserialise()</ref> are not implemented. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="519"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueMapPostingSource_1534c78ecea04a7a649d8ba27447edee3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string Xapian::ValueMapPostingSource::serialise</definition>
        <argsstring>() const </argsstring>
        <name>serialise</name>
        <reimplements refid="classXapian_1_1PostingSource_16ad26dc173cf1ab175dea945ba2622e0">serialise</reimplements>
        <briefdescription>
<para>Serialise object parameters into a string. </para>        </briefdescription>
        <detaileddescription>
<para>The serialised parameters should represent the configuration of the posting source, but need not (indeed, should not) represent the current iteration state.</para><para>If you don&apos;t want to support the remote backend, you can use the default implementation which simply throws <ref refid="classXapian_1_1UnimplementedError" kindref="compound">Xapian::UnimplementedError</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="520"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueMapPostingSource_1b3f716ff004f91e2ecc51548119f3891" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classXapian_1_1ValueMapPostingSource" kindref="compound">ValueMapPostingSource</ref> *</type>
        <definition>ValueMapPostingSource* Xapian::ValueMapPostingSource::unserialise</definition>
        <argsstring>(const std::string &amp;s) const </argsstring>
        <name>unserialise</name>
        <reimplements refid="classXapian_1_1PostingSource_1b3312a9172b1881c354faf3d2d9b585d">unserialise</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Create object given string serialisation returned by <ref refid="classXapian_1_1ValueMapPostingSource_1534c78ecea04a7a649d8ba27447edee3" kindref="member">serialise()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Note that the returned object will be deallocated by <ref refid="namespaceXapian" kindref="compound">Xapian</ref> after use with &quot;delete&quot;. It must therefore have been allocated with &quot;new&quot;.</para><para>If you don&apos;t want to support the remote backend, you can use the default implementation which simply throws <ref refid="classXapian_1_1UnimplementedError" kindref="compound">Xapian::UnimplementedError</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>A serialised instance of this <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> subclass. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="521"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueMapPostingSource_1e76de9cb534e96b7a0cc827d89eea8fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Xapian::ValueMapPostingSource::init</definition>
        <argsstring>(const Database &amp;db_)</argsstring>
        <name>init</name>
        <reimplements refid="classXapian_1_1ValuePostingSource_1764328b2a7085e24393a94eb1d2b91e0">init</reimplements>
        <param>
          <type>const <ref refid="classXapian_1_1Database" kindref="compound">Database</ref> &amp;</type>
          <declname>db</declname>
        </param>
        <briefdescription>
<para>Set this <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> to the start of the list of postings. </para>        </briefdescription>
        <detaileddescription>
<para>This is called automatically by the matcher prior to each query being processed.</para><para>If a <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> is used for multiple searches, <emphasis><ref refid="classXapian_1_1ValueMapPostingSource_1e76de9cb534e96b7a0cc827d89eea8fc" kindref="member">init()</ref></emphasis> will therefore be called multiple times, and must handle this by using the database passed in the most recent call.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>db</parametername>
</parameternamelist>
<parameterdescription>
<para>The database which the <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> should iterate through.</para></parameterdescription>
</parameteritem>
</parameterlist>
Note: the database supplied to this method must not be modified: in particular, the reopen() method should not be called on it.</para><para>Note: in the case of a multi-database search, a separate <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> will be used for each database (the separate PostingSources will be obtained using <emphasis><ref refid="classXapian_1_1ValueMapPostingSource_175598085ba9e49e1a2fd0e232d191461" kindref="member">clone()</ref></emphasis>), and each <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> will be passed one of the sub-databases as the <emphasis>db</emphasis> parameter here. The <emphasis>db</emphasis> parameter will therefore always refer to a single database. All docids passed to, or returned from, the <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> refer to docids in that single database, rather than in the multi-database. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="522"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1ValueMapPostingSource_1e8687a2981841c33bb04f3e28d3d7892" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string Xapian::ValueMapPostingSource::get_description</definition>
        <argsstring>() const </argsstring>
        <name>get_description</name>
        <reimplements refid="classXapian_1_1PostingSource_147d794241880cc691df1c3a3896d1050">get_description</reimplements>
        <briefdescription>
<para>Return a string describing this object. </para>        </briefdescription>
        <detaileddescription>
<para>This default implementation returns a generic answer. This default it provided to avoid forcing those deriving their own <ref refid="classXapian_1_1PostingSource" kindref="compound">PostingSource</ref> subclass from having to implement this (they may not care what <ref refid="classXapian_1_1ValueMapPostingSource_1e8687a2981841c33bb04f3e28d3d7892" kindref="member">get_description()</ref> gives for their subclass). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="524"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A posting source which looks up weights in a map using values as the key. </para>    </briefdescription>
    <detaileddescription>
<para>This allows will return entries for all documents in the given database which have a value in the slot specified. The values will be mapped to the corresponding weight in the weight map. If there is no mapping for a particular value, the default weight will be returned (which itself defaults to 0.0). </para>    </detaileddescription>
    <inheritancegraph>
      <node id="725">
        <label>Xapian::ValuePostingSource</label>
        <link refid="classXapian_1_1ValuePostingSource"/>
        <childnode refid="726" relation="public-inheritance">
        </childnode>
      </node>
      <node id="724">
        <label>Xapian::ValueMapPostingSource</label>
        <link refid="classXapian_1_1ValueMapPostingSource"/>
        <childnode refid="725" relation="public-inheritance">
        </childnode>
      </node>
      <node id="726">
        <label>Xapian::PostingSource</label>
        <link refid="classXapian_1_1PostingSource"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="728">
        <label>Xapian::ValuePostingSource</label>
        <link refid="classXapian_1_1ValuePostingSource"/>
        <childnode refid="729" relation="public-inheritance">
        </childnode>
        <childnode refid="730" relation="usage">
          <edgelabel>value_it</edgelabel>
        </childnode>
        <childnode refid="731" relation="usage">
          <edgelabel>db</edgelabel>
        </childnode>
      </node>
      <node id="731">
        <label>Xapian::Database</label>
        <link refid="classXapian_1_1Database"/>
      </node>
      <node id="727">
        <label>Xapian::ValueMapPostingSource</label>
        <link refid="classXapian_1_1ValueMapPostingSource"/>
        <childnode refid="728" relation="public-inheritance">
        </childnode>
      </node>
      <node id="730">
        <label>Xapian::ValueIterator</label>
        <link refid="classXapian_1_1ValueIterator"/>
      </node>
      <node id="729">
        <label>Xapian::PostingSource</label>
        <link refid="classXapian_1_1PostingSource"/>
      </node>
    </collaborationgraph>
    <location file="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" line="487" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/postingsource.h" bodystart="486" bodyend="525"/>
    <listofallmembers>
      <member refid="classXapian_1_1ValueMapPostingSource_1126c88575ad8f06c850826ac7cd2a591" prot="public" virt="non-virtual"><scope>Xapian::ValueMapPostingSource</scope><name>add_mapping</name></member>
      <member refid="classXapian_1_1ValuePostingSource_14bb7ea314dbd569f90f89731204cdc40" prot="public" virt="virtual"><scope>Xapian::ValueMapPostingSource</scope><name>at_end</name></member>
      <member refid="classXapian_1_1ValuePostingSource_171868e54627098425820f7a76e259197" prot="public" virt="virtual"><scope>Xapian::ValueMapPostingSource</scope><name>check</name></member>
      <member refid="classXapian_1_1ValueMapPostingSource_14f41218d580d29681e748a7d25aad8aa" prot="public" virt="non-virtual"><scope>Xapian::ValueMapPostingSource</scope><name>clear_mappings</name></member>
      <member refid="classXapian_1_1ValueMapPostingSource_175598085ba9e49e1a2fd0e232d191461" prot="public" virt="virtual"><scope>Xapian::ValueMapPostingSource</scope><name>clone</name></member>
      <member refid="classXapian_1_1ValuePostingSource_124ed690d4249ce0929a1a1ff236124f1" prot="protected" virt="non-virtual"><scope>Xapian::ValueMapPostingSource</scope><name>db</name></member>
      <member refid="classXapian_1_1ValueMapPostingSource_1d4f6b6782529e222bcbaefaec9690e12" prot="private" virt="non-virtual"><scope>Xapian::ValueMapPostingSource</scope><name>default_weight</name></member>
      <member refid="classXapian_1_1ValueMapPostingSource_1e8687a2981841c33bb04f3e28d3d7892" prot="public" virt="virtual"><scope>Xapian::ValueMapPostingSource</scope><name>get_description</name></member>
      <member refid="classXapian_1_1ValuePostingSource_16507d4d1a4119058890d92dfad53f40d" prot="public" virt="virtual"><scope>Xapian::ValueMapPostingSource</scope><name>get_docid</name></member>
      <member refid="classXapian_1_1PostingSource_1620fa76be33e59e0bd5fc4caa479e6ee" prot="public" virt="non-virtual"><scope>Xapian::ValueMapPostingSource</scope><name>get_maxweight</name></member>
      <member refid="classXapian_1_1ValuePostingSource_1dd937d003f986ff60119bffbac277d76" prot="public" virt="virtual"><scope>Xapian::ValueMapPostingSource</scope><name>get_termfreq_est</name></member>
      <member refid="classXapian_1_1ValuePostingSource_1c71b845c832955fe708d9ad6dbcf87e5" prot="public" virt="virtual"><scope>Xapian::ValueMapPostingSource</scope><name>get_termfreq_max</name></member>
      <member refid="classXapian_1_1ValuePostingSource_173743991ef0f5a2818d56c94e9e019f4" prot="public" virt="virtual"><scope>Xapian::ValueMapPostingSource</scope><name>get_termfreq_min</name></member>
      <member refid="classXapian_1_1ValueMapPostingSource_196cea230e42fa66778ac109501413327" prot="public" virt="virtual"><scope>Xapian::ValueMapPostingSource</scope><name>get_weight</name></member>
      <member refid="classXapian_1_1ValueMapPostingSource_1e76de9cb534e96b7a0cc827d89eea8fc" prot="public" virt="virtual"><scope>Xapian::ValueMapPostingSource</scope><name>init</name></member>
      <member refid="classXapian_1_1ValueMapPostingSource_14ccad7c8b7ab1261b49fc1899ca53e44" prot="private" virt="non-virtual"><scope>Xapian::ValueMapPostingSource</scope><name>max_weight_in_map</name></member>
      <member refid="classXapian_1_1ValueMapPostingSource_1717c8ccd76b95946b07e68e759dcca97" prot="public" virt="virtual"><scope>Xapian::ValueMapPostingSource</scope><name>name</name></member>
      <member refid="classXapian_1_1ValuePostingSource_187b22aac8422f80124b50a456d1d85b0" prot="public" virt="virtual"><scope>Xapian::ValueMapPostingSource</scope><name>next</name></member>
      <member refid="classXapian_1_1PostingSource_182e85d6113d9c8e72cbbf4b3362f3fd6" prot="protected" virt="non-virtual"><scope>Xapian::ValueMapPostingSource</scope><name>PostingSource</name></member>
      <member refid="classXapian_1_1ValueMapPostingSource_1534c78ecea04a7a649d8ba27447edee3" prot="public" virt="virtual"><scope>Xapian::ValueMapPostingSource</scope><name>serialise</name></member>
      <member refid="classXapian_1_1ValueMapPostingSource_1895c2f710b42bf93f71d0321225dc38f" prot="public" virt="non-virtual"><scope>Xapian::ValueMapPostingSource</scope><name>set_default_weight</name></member>
      <member refid="classXapian_1_1PostingSource_10643cf1dfb1c3ed2dd1cf5ecfe3f3a10" prot="protected" virt="non-virtual"><scope>Xapian::ValueMapPostingSource</scope><name>set_maxweight</name></member>
      <member refid="classXapian_1_1ValuePostingSource_1f11095a4355f96d7bc12074a5a91cd93" prot="public" virt="virtual"><scope>Xapian::ValueMapPostingSource</scope><name>skip_to</name></member>
      <member refid="classXapian_1_1ValuePostingSource_1efd7cda358e1dc81ccd72bfe7b0f940c" prot="protected" virt="non-virtual"><scope>Xapian::ValueMapPostingSource</scope><name>slot</name></member>
      <member refid="classXapian_1_1ValuePostingSource_1f961be7d3dcc2eb8b9e70744ce2c7597" prot="protected" virt="non-virtual"><scope>Xapian::ValueMapPostingSource</scope><name>started</name></member>
      <member refid="classXapian_1_1ValuePostingSource_1b9b4cc08e1ba2da73f059b2312ae3986" prot="protected" virt="non-virtual"><scope>Xapian::ValueMapPostingSource</scope><name>termfreq_est</name></member>
      <member refid="classXapian_1_1ValuePostingSource_13a7be278e6615876d57a254a60826c2f" prot="protected" virt="non-virtual"><scope>Xapian::ValueMapPostingSource</scope><name>termfreq_max</name></member>
      <member refid="classXapian_1_1ValuePostingSource_130f64f26a6faddc3f24b8c00e2ba5d0b" prot="protected" virt="non-virtual"><scope>Xapian::ValueMapPostingSource</scope><name>termfreq_min</name></member>
      <member refid="classXapian_1_1ValueMapPostingSource_1b3f716ff004f91e2ecc51548119f3891" prot="public" virt="virtual"><scope>Xapian::ValueMapPostingSource</scope><name>unserialise</name></member>
      <member refid="classXapian_1_1ValuePostingSource_1ddc0e75dc4ad4cfcf1f2d807bc3b32c4" prot="protected" virt="non-virtual"><scope>Xapian::ValueMapPostingSource</scope><name>value_it</name></member>
      <member refid="classXapian_1_1ValueMapPostingSource_1ef9518eab055c5f1d3bea3fb8df4368f" prot="public" virt="non-virtual"><scope>Xapian::ValueMapPostingSource</scope><name>ValueMapPostingSource</name></member>
      <member refid="classXapian_1_1ValuePostingSource_1ccbffc6b7f573e9a41fc234a410a1ec3" prot="public" virt="non-virtual"><scope>Xapian::ValueMapPostingSource</scope><name>ValuePostingSource</name></member>
      <member refid="classXapian_1_1ValueMapPostingSource_141a51ab1654a4e21e00f5e84c19d5002" prot="private" virt="non-virtual"><scope>Xapian::ValueMapPostingSource</scope><name>weight_map</name></member>
      <member refid="classXapian_1_1PostingSource_1679981b0badcc1a6308d4cbf8c5de7a0" prot="public" virt="virtual"><scope>Xapian::ValueMapPostingSource</scope><name>~PostingSource</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
