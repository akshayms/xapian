<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.9">
  <compounddef id="classXapian_1_1DateValueRangeProcessor" kind="class" prot="public">
    <compoundname>Xapian::DateValueRangeProcessor</compoundname>
    <basecompoundref refid="classXapian_1_1StringValueRangeProcessor" prot="public" virt="non-virtual">Xapian::StringValueRangeProcessor</basecompoundref>
    <includes local="no">queryparser.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classXapian_1_1DateValueRangeProcessor_11718083ff97bc81772230a455c04fd94" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Xapian::DateValueRangeProcessor::prefer_mdy</definition>
        <argsstring></argsstring>
        <name>prefer_mdy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/queryparser.h" line="147" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/queryparser.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classXapian_1_1DateValueRangeProcessor_16a4e6481c7b2d0cf6c35f0b2a3d54172" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Xapian::DateValueRangeProcessor::epoch_year</definition>
        <argsstring></argsstring>
        <name>epoch_year</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/queryparser.h" line="148" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/queryparser.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classXapian_1_1DateValueRangeProcessor_1dfec2564921b21c35bd72c63d1793745" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Xapian::DateValueRangeProcessor::DateValueRangeProcessor</definition>
        <argsstring>(Xapian::valueno slot_, bool prefer_mdy_=false, int epoch_year_=1970)</argsstring>
        <name>DateValueRangeProcessor</name>
        <param>
          <type><ref refid="namespaceXapian_194a899651fa920c72ffa9635bde630ea" kindref="member">Xapian::valueno</ref></type>
          <declname>slot_</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>prefer_mdy_</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>epoch_year_</declname>
          <defval>1970</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slot_</parametername>
</parameternamelist>
<parameterdescription>
<para>The value number to return from operator(). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefer_mdy_</parametername>
</parameternamelist>
<parameterdescription>
<para>Should ambiguous dates be interpreted as month/day/year rather than day/month/year? (default: false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epoch_year_</parametername>
</parameternamelist>
<parameterdescription>
<para>Year to use as the epoch for dates with 2 digit years (default: 1970, so 1/1/69 is 2069 while 1/1/70 is 1970). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/queryparser.h" line="164" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/queryparser.h" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1DateValueRangeProcessor_1ca14923c4886029ac19f96ea145ede38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Xapian::DateValueRangeProcessor::DateValueRangeProcessor</definition>
        <argsstring>(Xapian::valueno slot_, const std::string &amp;str_, bool prefix_=true, bool prefer_mdy_=false, int epoch_year_=1970)</argsstring>
        <name>DateValueRangeProcessor</name>
        <param>
          <type><ref refid="namespaceXapian_194a899651fa920c72ffa9635bde630ea" kindref="member">Xapian::valueno</ref></type>
          <declname>slot_</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str_</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>prefix_</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>prefer_mdy_</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>epoch_year_</declname>
          <defval>1970</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slot_</parametername>
</parameternamelist>
<parameterdescription>
<para>The value number to return from operator().</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str_</parametername>
</parameternamelist>
<parameterdescription>
<para>A string to look for to recognise values as belonging to this date range.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix_</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to look for the string at the start or end of the values. If true, the string is a prefix; if false, the string is a suffix (default: true).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefer_mdy_</parametername>
</parameternamelist>
<parameterdescription>
<para>Should ambiguous dates be interpreted as month/day/year rather than day/month/year? (default: false)</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epoch_year_</parametername>
</parameternamelist>
<parameterdescription>
<para>Year to use as the epoch for dates with 2 digit years (default: 1970, so 1/1/69 is 2069 while 1/1/70 is 1970).</para></parameterdescription>
</parameteritem>
</parameterlist>
The string supplied in str_ is used by <emphasis>operator()</emphasis> to decide whether the pair of strings supplied to it constitute a valid range. If prefix_ is true, the first value in a range must begin with str_ (and the second value may optionally begin with str_); if prefix_ is false, the second value in a range must end with str_ (and the first value may optionally end with str_).</para><para>If str_ is empty, the setting of prefix_ is irrelevant, and no special strings are required at the start or end of the strings defining the range.</para><para>The remainder of both strings defining the endpoints must be valid dates.</para><para>For example, if str_ is &quot;created:&quot; and prefix_ is true, and the range processor has been added to the queryparser, the queryparser will accept &quot;created:1/1/2000..31/12/2001&quot;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/queryparser.h" line="207" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/queryparser.h" bodystart="203" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classXapian_1_1DateValueRangeProcessor_129c079d9156a872f38fca82195525a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceXapian_194a899651fa920c72ffa9635bde630ea" kindref="member">Xapian::valueno</ref></type>
        <definition>Xapian::valueno Xapian::DateValueRangeProcessor::operator()</definition>
        <argsstring>(std::string &amp;begin, std::string &amp;end)</argsstring>
        <name>operator()</name>
        <reimplements refid="classXapian_1_1StringValueRangeProcessor_13001cf2c0e25875c7ffba9fe9de7f874">operator()</reimplements>
        <param>
          <type>std::string &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Check for a valid range of this type. </para>        </briefdescription>
        <detaileddescription>
<para>If BEGIN..END is a sensible date range, this method returns the value number of range filter on. Otherwise it returns <ref refid="namespaceXapian_10a75ef120e641c77f703e60f595ffda2" kindref="member">Xapian::BAD_VALUENO</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xapiandev/letor/xapian-core/include/xapian/queryparser.h" line="215"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Handle a date range. </para>    </briefdescription>
    <detaileddescription>
<para>Begin and end must be dates in a recognised format. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="373">
        <label>Xapian::DateValueRangeProcessor</label>
        <link refid="classXapian_1_1DateValueRangeProcessor"/>
        <childnode refid="374" relation="public-inheritance">
        </childnode>
      </node>
      <node id="375">
        <label>Xapian::ValueRangeProcessor</label>
        <link refid="structXapian_1_1ValueRangeProcessor"/>
      </node>
      <node id="374">
        <label>Xapian::StringValueRangeProcessor</label>
        <link refid="classXapian_1_1StringValueRangeProcessor"/>
        <childnode refid="375" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="376">
        <label>Xapian::DateValueRangeProcessor</label>
        <link refid="classXapian_1_1DateValueRangeProcessor"/>
        <childnode refid="377" relation="public-inheritance">
        </childnode>
      </node>
      <node id="378">
        <label>Xapian::ValueRangeProcessor</label>
        <link refid="structXapian_1_1ValueRangeProcessor"/>
      </node>
      <node id="377">
        <label>Xapian::StringValueRangeProcessor</label>
        <link refid="classXapian_1_1StringValueRangeProcessor"/>
        <childnode refid="378" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/xapiandev/letor/xapian-core/include/xapian/queryparser.h" line="146" bodyfile="/home/xapiandev/letor/xapian-core/include/xapian/queryparser.h" bodystart="146" bodyend="216"/>
    <listofallmembers>
      <member refid="classXapian_1_1DateValueRangeProcessor_1dfec2564921b21c35bd72c63d1793745" prot="public" virt="non-virtual"><scope>Xapian::DateValueRangeProcessor</scope><name>DateValueRangeProcessor</name></member>
      <member refid="classXapian_1_1DateValueRangeProcessor_1ca14923c4886029ac19f96ea145ede38" prot="public" virt="non-virtual"><scope>Xapian::DateValueRangeProcessor</scope><name>DateValueRangeProcessor</name></member>
      <member refid="classXapian_1_1DateValueRangeProcessor_16a4e6481c7b2d0cf6c35f0b2a3d54172" prot="private" virt="non-virtual"><scope>Xapian::DateValueRangeProcessor</scope><name>epoch_year</name></member>
      <member refid="classXapian_1_1DateValueRangeProcessor_129c079d9156a872f38fca82195525a92" prot="public" virt="virtual"><scope>Xapian::DateValueRangeProcessor</scope><name>operator()</name></member>
      <member refid="classXapian_1_1DateValueRangeProcessor_11718083ff97bc81772230a455c04fd94" prot="private" virt="non-virtual"><scope>Xapian::DateValueRangeProcessor</scope><name>prefer_mdy</name></member>
      <member refid="classXapian_1_1StringValueRangeProcessor_15601dd9129f9b21e7b973881bb4a2187" prot="public" virt="non-virtual"><scope>Xapian::DateValueRangeProcessor</scope><name>StringValueRangeProcessor</name></member>
      <member refid="classXapian_1_1StringValueRangeProcessor_1e0f051c154c1395b0fbd0834df102c4f" prot="public" virt="non-virtual"><scope>Xapian::DateValueRangeProcessor</scope><name>StringValueRangeProcessor</name></member>
      <member refid="classXapian_1_1StringValueRangeProcessor_162b1ae7a770c8fce5be0636204e7a493" prot="protected" virt="non-virtual"><scope>Xapian::DateValueRangeProcessor</scope><name>valno</name></member>
      <member refid="structXapian_1_1ValueRangeProcessor_1b32baad9238adb002b47f99ec362e56e" prot="public" virt="virtual"><scope>Xapian::DateValueRangeProcessor</scope><name>~ValueRangeProcessor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
